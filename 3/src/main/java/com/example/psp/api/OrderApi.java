/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.model.CreateOrderDTO;
import com.example.psp.model.OrderDTO;
import com.example.psp.model.PaymentDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "order", description = "the order API")
public interface OrderApi {

    default OrderApiDelegate getDelegate() {
        return new OrderApiDelegate() {};
    }

    /**
     * GET /order/{orderId} : Gets order by id.
     *
     * @param orderId Id of the order. (required)
     * @return Returns order information. (status code 200)
     *         or If order doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Gets order by id.", nickname = "orderOrderIdGet", notes = "", response = OrderDTO.class, tags={ "Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns order information.", response = OrderDTO.class),
        @ApiResponse(code = 404, message = "If order doesn't exist.") })
    @GetMapping(
        value = "/order/{orderId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<OrderDTO> orderOrderIdGet(@ApiParam(value = "Id of the order.",required=true) @PathVariable("orderId") Integer orderId) {
        return getDelegate().orderOrderIdGet(orderId);
    }


    /**
     * POST /order/{orderId}/payment : Links a payment to an order.
     *
     * @param orderId Id of the order. (required)
     * @param paymentDTO Payment information. (optional)
     * @return Returns payment information. (status code 200)
     *         or If paid with digital money, but change field is filled. (status code 400)
     *         or If order doesn&#39;t exists. (status code 404)
     */
    @ApiOperation(value = "Links a payment to an order.", nickname = "orderOrderIdPaymentPost", notes = "", response = PaymentDTO.class, tags={ "Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns payment information.", response = PaymentDTO.class),
        @ApiResponse(code = 400, message = "If paid with digital money, but change field is filled."),
        @ApiResponse(code = 404, message = "If order doesn't exists.") })
    @PostMapping(
        value = "/order/{orderId}/payment",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<PaymentDTO> orderOrderIdPaymentPost(@ApiParam(value = "Id of the order.",required=true) @PathVariable("orderId") Integer orderId,@ApiParam(value = "Payment information."  )  @Valid @RequestBody(required = false) PaymentDTO paymentDTO) {
        return getDelegate().orderOrderIdPaymentPost(orderId, paymentDTO);
    }


    /**
     * POST /order/{orderId}/refund : Refunds an order.
     * This endpoint can only be used by an authorised service providers.
     *
     * @param orderId Id of the order. (required)
     * @return Returns a response that order was refunded successfully. (status code 200)
     *         or If order doesn&#39;t exists. (status code 404)
     */
    @ApiOperation(value = "Refunds an order.", nickname = "orderOrderIdRefundPost", notes = "This endpoint can only be used by an authorised service providers.", tags={ "Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a response that order was refunded successfully."),
        @ApiResponse(code = 404, message = "If order doesn't exists.") })
    @PostMapping(
        value = "/order/{orderId}/refund"
    )
    default ResponseEntity<Void> orderOrderIdRefundPost(@ApiParam(value = "Id of the order.",required=true) @PathVariable("orderId") Integer orderId) {
        return getDelegate().orderOrderIdRefundPost(orderId);
    }


    /**
     * POST /order : Creates and order.
     *
     * @param createOrderDTO Information required to create an order. (optional)
     * @return Returns information of the newly created order. (status code 200)
     */
    @ApiOperation(value = "Creates and order.", nickname = "orderPost", notes = "", response = OrderDTO.class, tags={ "Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns information of the newly created order.", response = OrderDTO.class) })
    @PostMapping(
        value = "/order",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<OrderDTO> orderPost(@ApiParam(value = "Information required to create an order."  )  @Valid @RequestBody(required = false) CreateOrderDTO createOrderDTO) {
        return getDelegate().orderPost(createOrderDTO);
    }

}
