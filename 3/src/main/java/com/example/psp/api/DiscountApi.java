/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.dto.AssignDiscountToBrandDTO;
import com.example.psp.dto.AssignDiscountToCategoryDTO;
import com.example.psp.dto.AssignDiscountToItemDTO;
import com.example.psp.dto.Discount;
import com.example.psp.dto.DiscountDto;
import com.example.psp.dto.ProblemDetails;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "discount", description = "the discount API")
public interface DiscountApi {

    default DiscountApiDelegate getDelegate() {
        return new DiscountApiDelegate() {};
    }

    /**
     * POST /discount/AssignDiscountToBrand : Endpoint to assign a discount to a brand.
     *
     * @param assignDiscountToBrandDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to assign a discount to a brand.", nickname = "discountAssignDiscountToBrandPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/discount/AssignDiscountToBrand",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> discountAssignDiscountToBrandPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignDiscountToBrandDTO assignDiscountToBrandDTO) {
        return getDelegate().discountAssignDiscountToBrandPost(assignDiscountToBrandDTO);
    }


    /**
     * POST /discount/assignDiscountToCategory : Endpoint to assign a discount to a category.
     *
     * @param assignDiscountToCategoryDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to assign a discount to a category.", nickname = "discountAssignDiscountToCategoryPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/discount/assignDiscountToCategory",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> discountAssignDiscountToCategoryPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignDiscountToCategoryDTO assignDiscountToCategoryDTO) {
        return getDelegate().discountAssignDiscountToCategoryPost(assignDiscountToCategoryDTO);
    }


    /**
     * POST /discount/AssignDiscountToItem : Endpoint to assign a discount to a product or service.
     *
     * @param assignDiscountToItemDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to assign a discount to a product or service.", nickname = "discountAssignDiscountToItemPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/discount/AssignDiscountToItem",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> discountAssignDiscountToItemPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignDiscountToItemDTO assignDiscountToItemDTO) {
        return getDelegate().discountAssignDiscountToItemPost(assignDiscountToItemDTO);
    }


    /**
     * GET /discount/{id} : Endpoint to get a single discount.
     *
     * @param id Id of the discount to get (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single discount.", nickname = "discountIdGet", notes = "", response = DiscountDto.class, tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DiscountDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/discount/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<DiscountDto> discountIdGet(@ApiParam(value = "Id of the discount to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().discountIdGet(id);
    }


    /**
     * PUT /discount/{id} : Endpoint to update a discount.
     *
     * @param id Id of the discount to update. (required)
     * @param discountDto Discount to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a discount.", nickname = "discountIdPut", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/discount/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> discountIdPut(@ApiParam(value = "Id of the discount to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Discount to update."  )  @Valid @RequestBody(required = false) DiscountDto discountDto) {
        return getDelegate().discountIdPut(id, discountDto);
    }


    /**
     * GET /discount/{pageSize}/{pageNumber} : Endpoint to get multiple discounts.
     *
     * @param pageSize The maximum amount of discounts in response. (required)
     * @param pageNumber The page number of discounts to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get multiple discounts.", nickname = "discountPageSizePageNumberGet", notes = "", response = Discount.class, responseContainer = "List", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Discount.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/discount/{pageSize}/{pageNumber}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Discount>> discountPageSizePageNumberGet(@ApiParam(value = "The maximum amount of discounts in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of discounts to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().discountPageSizePageNumberGet(pageSize, pageNumber);
    }


    /**
     * POST /discount : Endpoint to create a new discount.
     *
     * @param discountDto Discount to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new discount.", nickname = "discountPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/discount",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> discountPost(@ApiParam(value = "Discount to create."  )  @Valid @RequestBody(required = false) DiscountDto discountDto) {
        return getDelegate().discountPost(discountDto);
    }

}
