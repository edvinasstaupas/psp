/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import java.time.OffsetDateTime;
import com.example.psp.model.ProblemDetails;
import com.example.psp.model.TimeSlotDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "time-slot", description = "the time-slot API")
public interface TimeSlotApi {

    default TimeSlotApiDelegate getDelegate() {
        return new TimeSlotApiDelegate() {};
    }

    /**
     * GET /time-slot/{employeeId} : Gets all time slots by employee id
     *
     * @param employeeId  (required)
     * @return Returns time slot details (status code 200)
     *         or If time slot ID is less or equal to 0 (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by employee id", nickname = "timeSlotEmployeeIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/time-slot/{employeeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TimeSlotDTO> timeSlotEmployeeIdGet(@ApiParam(value = "",required=true) @PathVariable("employeeId") Integer employeeId) {
        return getDelegate().timeSlotEmployeeIdGet(employeeId);
    }


    /**
     * GET /time-slot : Gets all time slots by date
     *
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @return Returns time slot details (status code 200)
     *         or If provided dates are invalid (status code 400)
     *         or If no dates matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by date", nickname = "timeSlotGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If provided dates are invalid", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no dates matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/time-slot",
        produces = { "application/json" }
    )
    default ResponseEntity<TimeSlotDTO> timeSlotGet(@ApiParam(value = "") @Valid @RequestParam(value = "FromDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime fromDate,@ApiParam(value = "") @Valid @RequestParam(value = "ToDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime toDate) {
        return getDelegate().timeSlotGet(fromDate, toDate);
    }


    /**
     * GET /time-slot/{locationId} : Gets all time slots by location id
     *
     * @param locationId  (required)
     * @return Returns time slot details (status code 200)
     *         or If time slot location ID is less or equal to 0 (status code 400)
     *         or If no time slot location ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by location id", nickname = "timeSlotLocationIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot location ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot location ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/time-slot/{locationId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TimeSlotDTO> timeSlotLocationIdGet(@ApiParam(value = "",required=true) @PathVariable("locationId") Integer locationId) {
        return getDelegate().timeSlotLocationIdGet(locationId);
    }


    /**
     * POST /time-slot : Creates a time slot
     *
     * @param timeSlotDTO  (optional)
     * @return If time slot has been succesfully created (status code 201)
     *         or If provided time slot details do not pass the validation (status code 400)
     */
    @ApiOperation(value = "Creates a time slot", nickname = "timeSlotPost", notes = "", tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "If time slot has been succesfully created"),
        @ApiResponse(code = 400, message = "If provided time slot details do not pass the validation", response = ProblemDetails.class) })
    @PostMapping(
        value = "/time-slot",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> timeSlotPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) TimeSlotDTO timeSlotDTO) {
        return getDelegate().timeSlotPost(timeSlotDTO);
    }


    /**
     * GET /time-slot/{serviceId} : Gets all time slots by service id
     *
     * @param serviceId  (required)
     * @return Success (status code 200)
     *         or If time slot service ID is less or equal to 0 (status code 400)
     *         or If no time slot service ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by service id", nickname = "timeSlotServiceIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot service ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot service ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/time-slot/{serviceId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TimeSlotDTO> timeSlotServiceIdGet(@ApiParam(value = "",required=true) @PathVariable("serviceId") Integer serviceId) {
        return getDelegate().timeSlotServiceIdGet(serviceId);
    }


    /**
     * DELETE /time-slot/{timeSlotId} : Deletes time slot
     *
     * @param timeSlotId  (required)
     * @return If time slot have been succesfully deleted (status code 200)
     *         or If time slot ID is less or equal to 0 (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Deletes time slot", nickname = "timeSlotTimeSlotIdDelete", notes = "", tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If time slot have been succesfully deleted"),
        @ApiResponse(code = 400, message = "If time slot ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/time-slot/{timeSlotId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> timeSlotTimeSlotIdDelete(@ApiParam(value = "",required=true) @PathVariable("timeSlotId") Integer timeSlotId) {
        return getDelegate().timeSlotTimeSlotIdDelete(timeSlotId);
    }


    /**
     * GET /time-slot/{timeSlotId} : Gets time slot details
     *
     * @param timeSlotId  (required)
     * @return Returns time slot details (status code 200)
     *         or If time slot ID is less or equal to 0 (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets time slot details", nickname = "timeSlotTimeSlotIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/time-slot/{timeSlotId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TimeSlotDTO> timeSlotTimeSlotIdGet(@ApiParam(value = "",required=true) @PathVariable("timeSlotId") Integer timeSlotId) {
        return getDelegate().timeSlotTimeSlotIdGet(timeSlotId);
    }


    /**
     * PUT /time-slot/{timeSlotId} : Updates time slot
     *
     * @param timeSlotId  (required)
     * @param timeSlotDTO  (optional)
     * @return If time slot details have been succesfully updated (status code 200)
     *         or If provided time slot details do not pass the validation (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Updates time slot", nickname = "timeSlotTimeSlotIdPut", notes = "", tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If time slot details have been succesfully updated"),
        @ApiResponse(code = 400, message = "If provided time slot details do not pass the validation", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @PutMapping(
        value = "/time-slot/{timeSlotId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> timeSlotTimeSlotIdPut(@ApiParam(value = "",required=true) @PathVariable("timeSlotId") Integer timeSlotId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) TimeSlotDTO timeSlotDTO) {
        return getDelegate().timeSlotTimeSlotIdPut(timeSlotId, timeSlotDTO);
    }

}
