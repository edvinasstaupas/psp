/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.model.AddCartItemDTO;
import com.example.psp.model.CartDTO;
import com.example.psp.model.CartItem;
import com.example.psp.model.CartItemDTO;
import com.example.psp.model.OrderDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "cart", description = "the cart API")
public interface CartApi {

    default CartApiDelegate getDelegate() {
        return new CartApiDelegate() {};
    }

    /**
     * GET /cart/{cartId} : Get a cart by id.
     *
     * @param cartId Id of the cart. (required)
     * @return Returns the cart. (status code 200)
     *         or If cart doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Get a cart by id.", nickname = "cartCartIdGet", notes = "", response = CartDTO.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the cart.", response = CartDTO.class),
        @ApiResponse(code = 404, message = "If cart doesn't exist.") })
    @GetMapping(
        value = "/cart/{cartId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CartDTO> cartCartIdGet(@ApiParam(value = "Id of the cart.",required=true) @PathVariable("cartId") Integer cartId) {
        return getDelegate().cartCartIdGet(cartId);
    }


    /**
     * POST /cart/{cartId}/order : Creates and order from a cart.
     *
     * @param cartId Id of the cart. (required)
     * @return Returns information of the newly created order. (status code 200)
     *         or If cart doesn&#39;t exists. (status code 404)
     */
    @ApiOperation(value = "Creates and order from a cart.", nickname = "cartCartIdOrderPost", notes = "", response = OrderDTO.class, tags={ "Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns information of the newly created order.", response = OrderDTO.class),
        @ApiResponse(code = 404, message = "If cart doesn't exists.") })
    @PostMapping(
        value = "/cart/{cartId}/order",
        produces = { "application/json" }
    )
    default ResponseEntity<OrderDTO> cartCartIdOrderPost(@ApiParam(value = "Id of the cart.",required=true) @PathVariable("cartId") Integer cartId) {
        return getDelegate().cartCartIdOrderPost(cartId);
    }


    /**
     * POST /cart/{cartId} : Adds an item to a cart.
     *
     * @param cartId Id of the cart. (required)
     * @param addCartItemDTO Item to be added to the cart. (optional)
     * @return Returns newly added cart item. (status code 200)
     *         or If ids of both product and bundle are provided. (status code 400)
     *         or If cart doen&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Adds an item to a cart.", nickname = "cartCartIdPost", notes = "", response = CartItemDTO.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns newly added cart item.", response = CartItemDTO.class),
        @ApiResponse(code = 400, message = "If ids of both product and bundle are provided."),
        @ApiResponse(code = 404, message = "If cart doen't exist.") })
    @PostMapping(
        value = "/cart/{cartId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CartItemDTO> cartCartIdPost(@ApiParam(value = "Id of the cart.",required=true) @PathVariable("cartId") Integer cartId,@ApiParam(value = "Item to be added to the cart."  )  @Valid @RequestBody(required = false) AddCartItemDTO addCartItemDTO) {
        return getDelegate().cartCartIdPost(cartId, addCartItemDTO);
    }


    /**
     * DELETE /cart/item/{cartItemId} : Removes cart item from a cart.
     *
     * @param cartItemId Id of the cart item. (required)
     * @return Returns a response that cart item was removed successfully. (status code 200)
     *         or If cart item doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Removes cart item from a cart.", nickname = "cartItemCartItemIdDelete", notes = "", tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a response that cart item was removed successfully."),
        @ApiResponse(code = 404, message = "If cart item doesn't exist.") })
    @DeleteMapping(
        value = "/cart/item/{cartItemId}"
    )
    default ResponseEntity<Void> cartItemCartItemIdDelete(@ApiParam(value = "Id of the cart item.",required=true) @PathVariable("cartItemId") Integer cartItemId) {
        return getDelegate().cartItemCartItemIdDelete(cartItemId);
    }


    /**
     * PUT /cart/item/{itemId} : Updates cart item.
     * If item quantity is set to 0, item should be removed from the cart.
     *
     * @param itemId Id of the cart item. (required)
     * @param cartItem Cart item with updated information. (optional)
     * @return Returns cart item with updated information. (status code 200)
     *         or If cart item doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Updates cart item.", nickname = "cartItemItemIdPut", notes = "If item quantity is set to 0, item should be removed from the cart.", tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns cart item with updated information."),
        @ApiResponse(code = 404, message = "If cart item doesn't exist.") })
    @PutMapping(
        value = "/cart/item/{itemId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> cartItemItemIdPut(@ApiParam(value = "Id of the cart item.",required=true) @PathVariable("itemId") Integer itemId,@ApiParam(value = "Cart item with updated information."  )  @Valid @RequestBody(required = false) CartItem cartItem) {
        return getDelegate().cartItemItemIdPut(itemId, cartItem);
    }


    /**
     * POST /cart : Creates a cart for a specified customer.
     *
     * @param body Id of the customer. (optional)
     * @return Returns newly created cart. (status code 200)
     *         or If customer doesn&#39;t exists. (status code 404)
     */
    @ApiOperation(value = "Creates a cart for a specified customer.", nickname = "cartPost", notes = "", response = CartDTO.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns newly created cart.", response = CartDTO.class),
        @ApiResponse(code = 404, message = "If customer doesn't exists.") })
    @PostMapping(
        value = "/cart",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CartDTO> cartPost(@ApiParam(value = "Id of the customer."  )  @Valid @RequestBody(required = false) Integer body) {
        return getDelegate().cartPost(body);
    }

}
