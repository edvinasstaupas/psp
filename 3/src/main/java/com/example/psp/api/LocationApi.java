/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.dto.Location;
import com.example.psp.dto.LocationDto;
import com.example.psp.dto.ProblemDetails;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "location", description = "the location API")
public interface LocationApi {

    default LocationApiDelegate getDelegate() {
        return new LocationApiDelegate() {};
    }

    /**
     * DELETE /location/{id} : Endpoint to delete a business location.
     *
     * @param id Id of the business location to delete. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to delete a business location.", nickname = "locationIdDelete", notes = "", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/location/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> locationIdDelete(@ApiParam(value = "Id of the business location to delete.",required=true) @PathVariable("id") Integer id) {
        return getDelegate().locationIdDelete(id);
    }


    /**
     * GET /location/{id} : Endpoint to get a single business location.
     *
     * @param id Id of the business location to get (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single business location.", nickname = "locationIdGet", notes = "", response = LocationDto.class, tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = LocationDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/location/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<LocationDto> locationIdGet(@ApiParam(value = "Id of the business location to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().locationIdGet(id);
    }


    /**
     * PUT /location/{id} : Endpoint to update a business location.
     *
     * @param id Id of the business location to update. (required)
     * @param locationDto Business location to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a business location.", nickname = "locationIdPut", notes = "", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/location/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> locationIdPut(@ApiParam(value = "Id of the business location to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Business location to update."  )  @Valid @RequestBody(required = false) LocationDto locationDto) {
        return getDelegate().locationIdPut(id, locationDto);
    }


    /**
     * GET /location/{pageSize}/{pageNumber} : Endpoint to get multiple business locations.
     *
     * @param pageSize The maximum amount of business locations in response. (required)
     * @param pageNumber The page number of business locations to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get multiple business locations.", nickname = "locationPageSizePageNumberGet", notes = "", response = Location.class, responseContainer = "List", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Location.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/location/{pageSize}/{pageNumber}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Location>> locationPageSizePageNumberGet(@ApiParam(value = "The maximum amount of business locations in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of business locations to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().locationPageSizePageNumberGet(pageSize, pageNumber);
    }


    /**
     * POST /location : Endpoint to create a new business location.
     *
     * @param locationDto Business location to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new business location.", nickname = "locationPost", notes = "", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/location",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> locationPost(@ApiParam(value = "Business location to create."  )  @Valid @RequestBody(required = false) LocationDto locationDto) {
        return getDelegate().locationPost(locationDto);
    }

}
