/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.dto.ProductDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "product", description = "the product API")
public interface ProductApi {

    default ProductApiDelegate getDelegate() {
        return new ProductApiDelegate() {};
    }

    /**
     * GET /product : Get a list of products.
     *
     * @param materialId Parameter to return all products that contain one or more specified materials. (optional)
     * @param categoryId Parameter to return all products that belong in one or more specified categories. (optional)
     * @param brandId Parameter to return all products assigned to specific brands. (optional)
     * @param pageSize Parameter to define how many records are in a page. (optional)
     * @param page Parameter to specify which page of records to return. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a list of products.", nickname = "productGet", notes = "", response = ProductDTO.class, responseContainer = "List", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductDTO.class, responseContainer = "List") })
    @GetMapping(
        value = "/product",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductDTO>> productGet(@ApiParam(value = "Parameter to return all products that contain one or more specified materials.") @Valid @RequestParam(value = "materialId", required = false) List<Integer> materialId,@ApiParam(value = "Parameter to return all products that belong in one or more specified categories.") @Valid @RequestParam(value = "categoryId", required = false) List<Integer> categoryId,@ApiParam(value = "Parameter to return all products assigned to specific brands.") @Valid @RequestParam(value = "brandId", required = false) List<Integer> brandId,@ApiParam(value = "Parameter to define how many records are in a page.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Parameter to specify which page of records to return.") @Valid @RequestParam(value = "page", required = false) Integer page) {
        return getDelegate().productGet(materialId, categoryId, brandId, pageSize, page);
    }


    /**
     * POST /product : Create product.
     *
     * @param productDTO  (optional)
     * @return Success (status code 200)
     *         or If some product details are missing. (status code 400)
     */
    @ApiOperation(value = "Create product.", nickname = "productPost", notes = "", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some product details are missing.") })
    @PostMapping(
        value = "/product",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> productPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductDTO productDTO) {
        return getDelegate().productPost(productDTO);
    }


    /**
     * DELETE /product/{productId} : Delete product by id.
     *
     * @param productId  (required)
     * @return Success (status code 200)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Delete product by id.", nickname = "productProductIdDelete", notes = "", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @DeleteMapping(
        value = "/product/{productId}"
    )
    default ResponseEntity<Void> productProductIdDelete(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId) {
        return getDelegate().productProductIdDelete(productId);
    }


    /**
     * GET /product/{productId} : Get product by Id.
     *
     * @param productId  (required)
     * @return Success (status code 200)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Get product by Id.", nickname = "productProductIdGet", notes = "", response = ProductDTO.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductDTO.class),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @GetMapping(
        value = "/product/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDTO> productProductIdGet(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId) {
        return getDelegate().productProductIdGet(productId);
    }


    /**
     * PUT /product/{productId} : Update product by id.
     *
     * @param productId  (required)
     * @param productDTO  (optional)
     * @return Success (status code 200)
     *         or If some product details are missing. (status code 400)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Update product by id.", nickname = "productProductIdPut", notes = "", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some product details are missing."),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @PutMapping(
        value = "/product/{productId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> productProductIdPut(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductDTO productDTO) {
        return getDelegate().productProductIdPut(productId, productDTO);
    }

}
