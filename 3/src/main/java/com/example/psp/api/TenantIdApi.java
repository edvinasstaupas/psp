/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.model.AccountDetailsDTO;
import com.example.psp.model.AddCartItemDTO;
import com.example.psp.model.ApplyTaxRateToCategoryDTO;
import com.example.psp.model.AssignDiscountToBrandDTO;
import com.example.psp.model.AssignDiscountToCategoryDTO;
import com.example.psp.model.AssignDiscountToItemDTO;
import com.example.psp.model.AssignTaxRateToItemDTO;
import com.example.psp.model.BearerTokenDTO;
import com.example.psp.model.BriefSalesReportDTO;
import com.example.psp.model.BundleDTO;
import com.example.psp.model.BundleProduct;
import com.example.psp.model.CartDTO;
import com.example.psp.model.CartItem;
import com.example.psp.model.CartItemDTO;
import com.example.psp.model.CreateAccountDTO;
import com.example.psp.model.CreateReservationDTO;
import com.example.psp.model.DetailedSalesReportDTO;
import com.example.psp.model.Discount;
import com.example.psp.model.DiscountDto;
import com.example.psp.model.EmployeeDTO;
import com.example.psp.model.EmployeePermissionDTO;
import com.example.psp.model.Location;
import com.example.psp.model.LocationDto;
import com.example.psp.model.LoginDetailsDTO;
import com.example.psp.model.MaterialDTO;
import java.time.OffsetDateTime;
import com.example.psp.model.OrderStatusDTO;
import com.example.psp.model.OrderStatusTypes;
import com.example.psp.model.ProblemDetails;
import com.example.psp.model.ProductDTO;
import com.example.psp.model.ProductMaterial;
import com.example.psp.model.ProductStatusDTO;
import com.example.psp.model.ReservationInformationDTO;
import com.example.psp.model.Service;
import com.example.psp.model.ServiceDto;
import com.example.psp.model.ServiceFilterDto;
import com.example.psp.model.TaxRate;
import com.example.psp.model.TaxRateDto;
import com.example.psp.model.TimeSlotDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T13:36:52.004410700+02:00[Europe/Vilnius]")
@Validated
@Api(value = "{tenantId}", description = "the {tenantId} API")
public interface TenantIdApi {

    default TenantIdApiDelegate getDelegate() {
        return new TenantIdApiDelegate() {};
    }

    /**
     * DELETE /{tenantId}/Bundle/{bundleId} : Delete bundle by id.
     *
     * @param bundleId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If bundle with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Delete bundle by id.", nickname = "tenantIdBundleBundleIdDelete", notes = "", tags={ "Bundle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "If bundle with such id does not exist.") })
    @DeleteMapping(
        value = "/{tenantId}/Bundle/{bundleId}"
    )
    default ResponseEntity<Void> tenantIdBundleBundleIdDelete(@ApiParam(value = "",required=true) @PathVariable("bundleId") Integer bundleId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdBundleBundleIdDelete(bundleId, tenantId);
    }


    /**
     * GET /{tenantId}/Bundle/{bundleId} : Get bundle by Id.
     *
     * @param bundleId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If bundle with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Get bundle by Id.", nickname = "tenantIdBundleBundleIdGet", notes = "", response = BundleDTO.class, tags={ "Bundle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BundleDTO.class),
        @ApiResponse(code = 404, message = "If bundle with such id does not exist.") })
    @GetMapping(
        value = "/{tenantId}/Bundle/{bundleId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<BundleDTO> tenantIdBundleBundleIdGet(@ApiParam(value = "",required=true) @PathVariable("bundleId") Integer bundleId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdBundleBundleIdGet(bundleId, tenantId);
    }


    /**
     * PUT /{tenantId}/Bundle/{bundleId} : Update bundle by id.
     *
     * @param bundleId  (required)
     * @param tenantId  (required)
     * @param bundleDTO  (optional)
     * @return Success (status code 200)
     *         or If some bundle details are missing. (status code 400)
     *         or If bundle with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Update bundle by id.", nickname = "tenantIdBundleBundleIdPut", notes = "", tags={ "Bundle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some bundle details are missing."),
        @ApiResponse(code = 404, message = "If bundle with such id does not exist.") })
    @PutMapping(
        value = "/{tenantId}/Bundle/{bundleId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdBundleBundleIdPut(@ApiParam(value = "",required=true) @PathVariable("bundleId") Integer bundleId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) BundleDTO bundleDTO) {
        return getDelegate().tenantIdBundleBundleIdPut(bundleId, tenantId, bundleDTO);
    }


    /**
     * GET /{tenantId}/Bundle : Get a list of bundles.
     *
     * @param tenantId  (required)
     * @param pageSize Parameter to define how many records are in a page. (optional)
     * @param page Parameter to specify which page of records to return. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a list of bundles.", nickname = "tenantIdBundleGet", notes = "", response = BundleDTO.class, responseContainer = "List", tags={ "Bundle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BundleDTO.class, responseContainer = "List") })
    @GetMapping(
        value = "/{tenantId}/Bundle",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<BundleDTO>> tenantIdBundleGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Parameter to define how many records are in a page.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Parameter to specify which page of records to return.") @Valid @RequestParam(value = "page", required = false) Integer page) {
        return getDelegate().tenantIdBundleGet(tenantId, pageSize, page);
    }


    /**
     * POST /{tenantId}/Bundle : Create bundle.
     *
     * @param tenantId  (required)
     * @param bundleDTO  (optional)
     * @return Success (status code 200)
     *         or If some bundle details are missing. (status code 400)
     */
    @ApiOperation(value = "Create bundle.", nickname = "tenantIdBundlePost", notes = "", tags={ "Bundle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some bundle details are missing.") })
    @PostMapping(
        value = "/{tenantId}/Bundle",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdBundlePost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) BundleDTO bundleDTO) {
        return getDelegate().tenantIdBundlePost(tenantId, bundleDTO);
    }


    /**
     * GET /{tenantId}/BundleProduct/{bundleId} : Get list of bundle&#39;s all assigned products by bundle Id.
     *
     * @param bundleId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If bundle with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Get list of bundle's all assigned products by bundle Id.", nickname = "tenantIdBundleProductBundleIdGet", notes = "", response = BundleProduct.class, responseContainer = "List", tags={ "BundleProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BundleProduct.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "If bundle with such id does not exist.") })
    @GetMapping(
        value = "/{tenantId}/BundleProduct/{bundleId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<BundleProduct>> tenantIdBundleProductBundleIdGet(@ApiParam(value = "",required=true) @PathVariable("bundleId") Integer bundleId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdBundleProductBundleIdGet(bundleId, tenantId);
    }


    /**
     * DELETE /{tenantId}/BundleProduct/{bundleId}/{productId} : Delete bundle&#39;s assigned product by bundle Id and product Id.
     *
     * @param bundleId  (required)
     * @param productId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If product with such id is not assigned to bundle with such id. (status code 404)
     */
    @ApiOperation(value = "Delete bundle's assigned product by bundle Id and product Id.", nickname = "tenantIdBundleProductBundleIdProductIdDelete", notes = "", tags={ "BundleProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "If product with such id is not assigned to bundle with such id.") })
    @DeleteMapping(
        value = "/{tenantId}/BundleProduct/{bundleId}/{productId}"
    )
    default ResponseEntity<Void> tenantIdBundleProductBundleIdProductIdDelete(@ApiParam(value = "",required=true) @PathVariable("bundleId") Integer bundleId,@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdBundleProductBundleIdProductIdDelete(bundleId, productId, tenantId);
    }


    /**
     * GET /{tenantId}/BundleProduct/{bundleId}/{productId} : Get bundle&#39;s assigned product by bundle Id and product Id.
     *
     * @param bundleId  (required)
     * @param productId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If product with such id is not assigned to bundle with such id. (status code 404)
     */
    @ApiOperation(value = "Get bundle's assigned product by bundle Id and product Id.", nickname = "tenantIdBundleProductBundleIdProductIdGet", notes = "", response = BundleProduct.class, tags={ "BundleProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BundleProduct.class),
        @ApiResponse(code = 404, message = "If product with such id is not assigned to bundle with such id.") })
    @GetMapping(
        value = "/{tenantId}/BundleProduct/{bundleId}/{productId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<BundleProduct> tenantIdBundleProductBundleIdProductIdGet(@ApiParam(value = "",required=true) @PathVariable("bundleId") Integer bundleId,@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdBundleProductBundleIdProductIdGet(bundleId, productId, tenantId);
    }


    /**
     * PUT /{tenantId}/BundleProduct/{bundleId}/{productId} : Update bundle&#39;s assigned product by bundle Id and product Id.
     *
     * @param bundleId  (required)
     * @param productId  (required)
     * @param tenantId  (required)
     * @param bundleProduct  (optional)
     * @return Success (status code 200)
     *         or If some class details are missing. (status code 400)
     *         or If product with such id is not assigned to bundle with such id. (status code 404)
     */
    @ApiOperation(value = "Update bundle's assigned product by bundle Id and product Id.", nickname = "tenantIdBundleProductBundleIdProductIdPut", notes = "", tags={ "BundleProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some class details are missing."),
        @ApiResponse(code = 404, message = "If product with such id is not assigned to bundle with such id.") })
    @PutMapping(
        value = "/{tenantId}/BundleProduct/{bundleId}/{productId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdBundleProductBundleIdProductIdPut(@ApiParam(value = "",required=true) @PathVariable("bundleId") Integer bundleId,@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) BundleProduct bundleProduct) {
        return getDelegate().tenantIdBundleProductBundleIdProductIdPut(bundleId, productId, tenantId, bundleProduct);
    }


    /**
     * POST /{tenantId}/BundleProduct : Assign product to a bundle.
     *
     * @param tenantId  (required)
     * @param bundleProduct  (optional)
     * @return Success (status code 200)
     *         or If some class details are missing. (status code 400)
     */
    @ApiOperation(value = "Assign product to a bundle.", nickname = "tenantIdBundleProductPost", notes = "", tags={ "BundleProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some class details are missing.") })
    @PostMapping(
        value = "/{tenantId}/BundleProduct",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdBundleProductPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) BundleProduct bundleProduct) {
        return getDelegate().tenantIdBundleProductPost(tenantId, bundleProduct);
    }


    /**
     * GET /{tenantId}/Cart/{cartId} : Get a cart by id.
     *
     * @param tenantId Id of the tenant. (required)
     * @param cartId Id of the cart. (required)
     * @return Returns the cart. (status code 200)
     *         or If cart doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Get a cart by id.", nickname = "tenantIdCartCartIdGet", notes = "", response = CartDTO.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the cart.", response = CartDTO.class),
        @ApiResponse(code = 404, message = "If cart doesn't exist.") })
    @GetMapping(
        value = "/{tenantId}/Cart/{cartId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<CartDTO> tenantIdCartCartIdGet(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the cart.",required=true) @PathVariable("cartId") Integer cartId) {
        return getDelegate().tenantIdCartCartIdGet(tenantId, cartId);
    }


    /**
     * POST /{tenantId}/Cart/CartId : Adds an item to a cart.
     *
     * @param tenantId Id of the tenant. (required)
     * @param cartId Id of the cart. (optional)
     * @param addCartItemDTO Item to be added to the cart. (optional)
     * @return Returns newly added cart item. (status code 200)
     *         or If ids of both product and bundle are provided. (status code 400)
     *         or If cart doen&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Adds an item to a cart.", nickname = "tenantIdCartCartIdPost", notes = "", response = CartItemDTO.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns newly added cart item.", response = CartItemDTO.class),
        @ApiResponse(code = 400, message = "If ids of both product and bundle are provided."),
        @ApiResponse(code = 404, message = "If cart doen't exist.") })
    @PostMapping(
        value = "/{tenantId}/Cart/CartId",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<CartItemDTO> tenantIdCartCartIdPost(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the cart.") @Valid @RequestParam(value = "cartId", required = false) Integer cartId,@ApiParam(value = "Item to be added to the cart."  )  @Valid @RequestBody(required = false) AddCartItemDTO addCartItemDTO) {
        return getDelegate().tenantIdCartCartIdPost(tenantId, cartId, addCartItemDTO);
    }


    /**
     * DELETE /{tenantId}/Cart/Item/{cartItemId} : Removes cart item from a cart.
     *
     * @param tenantId Id of the tenant. (required)
     * @param cartItemId Id of the cart item. (required)
     * @return Returns a response that cart item was removed successfully. (status code 200)
     *         or If cart item doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Removes cart item from a cart.", nickname = "tenantIdCartItemCartItemIdDelete", notes = "", tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a response that cart item was removed successfully."),
        @ApiResponse(code = 404, message = "If cart item doesn't exist.") })
    @DeleteMapping(
        value = "/{tenantId}/Cart/Item/{cartItemId}"
    )
    default ResponseEntity<Void> tenantIdCartItemCartItemIdDelete(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the cart item.",required=true) @PathVariable("cartItemId") Integer cartItemId) {
        return getDelegate().tenantIdCartItemCartItemIdDelete(tenantId, cartItemId);
    }


    /**
     * PUT /{tenantId}/Cart/Item/{itemId} : Updates cart item.
     * If item quantity is set to 0, item should be removed from the cart.
     *
     * @param tenantId Id of the tenant. (required)
     * @param itemId Id of the cart item. (required)
     * @param cartItem Cart item with updated information. (optional)
     * @return Returns cart item with updated information. (status code 200)
     *         or If cart item doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Updates cart item.", nickname = "tenantIdCartItemItemIdPut", notes = "If item quantity is set to 0, item should be removed from the cart.", tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns cart item with updated information."),
        @ApiResponse(code = 404, message = "If cart item doesn't exist.") })
    @PutMapping(
        value = "/{tenantId}/Cart/Item/{itemId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdCartItemItemIdPut(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the cart item.",required=true) @PathVariable("itemId") Integer itemId,@ApiParam(value = "Cart item with updated information."  )  @Valid @RequestBody(required = false) CartItem cartItem) {
        return getDelegate().tenantIdCartItemItemIdPut(tenantId, itemId, cartItem);
    }


    /**
     * POST /{tenantId}/Cart : Creates a cart for a specified customer.
     *
     * @param tenantId Id of the tenant. (required)
     * @param body Id of the customer. (optional)
     * @return Returns newly created cart. (status code 200)
     *         or If customer doesn&#39;t exists. (status code 404)
     */
    @ApiOperation(value = "Creates a cart for a specified customer.", nickname = "tenantIdCartPost", notes = "", response = CartDTO.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns newly created cart.", response = CartDTO.class),
        @ApiResponse(code = 404, message = "If customer doesn't exists.") })
    @PostMapping(
        value = "/{tenantId}/Cart",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<CartDTO> tenantIdCartPost(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the customer."  )  @Valid @RequestBody(required = false) Integer body) {
        return getDelegate().tenantIdCartPost(tenantId, body);
    }


    /**
     * GET /{tenantId}/Customer/{customerId}/Cart : Returns a cart of a specified customer.
     *
     * @param tenantId Id of the tenant. (required)
     * @param customerId Id of the customer. (required)
     * @return Success (status code 200)
     *         or If customer doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Returns a cart of a specified customer.", nickname = "tenantIdCustomerCustomerIdCartGet", notes = "", response = CartDTO.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CartDTO.class),
        @ApiResponse(code = 404, message = "If customer doesn't exist.") })
    @GetMapping(
        value = "/{tenantId}/Customer/{customerId}/Cart",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<CartDTO> tenantIdCustomerCustomerIdCartGet(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the customer.",required=true) @PathVariable("customerId") Integer customerId) {
        return getDelegate().tenantIdCustomerCustomerIdCartGet(tenantId, customerId);
    }


    /**
     * GET /{tenantId}/Customer/{customerId}/Reservation : Gets alist of reservations of a customer optionally filtered by date.
     *
     * @param tenantId Id of the tenant. (required)
     * @param customerId Id of the customer. (required)
     * @param from Get reservations starting after specified date. (optional)
     * @param to Get reservations starting before specified date. (optional)
     * @return Returns empty lsit is no reservations were found. (status code 200)
     *         or If user doesn&#39;t have authorization to view data. (status code 401)
     *         or If user is not authenticated. (status code 403)
     */
    @ApiOperation(value = "Gets alist of reservations of a customer optionally filtered by date.", nickname = "tenantIdCustomerCustomerIdReservationGet", notes = "", response = ReservationInformationDTO.class, responseContainer = "List", tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns empty lsit is no reservations were found.", response = ReservationInformationDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "If user doesn't have authorization to view data."),
        @ApiResponse(code = 403, message = "If user is not authenticated.") })
    @GetMapping(
        value = "/{tenantId}/Customer/{customerId}/Reservation",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<ReservationInformationDTO>> tenantIdCustomerCustomerIdReservationGet(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the customer.",required=true) @PathVariable("customerId") Integer customerId,@ApiParam(value = "Get reservations starting after specified date.") @Valid @RequestParam(value = "from", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime from,@ApiParam(value = "Get reservations starting before specified date.") @Valid @RequestParam(value = "to", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime to) {
        return getDelegate().tenantIdCustomerCustomerIdReservationGet(tenantId, customerId, from, to);
    }


    /**
     * GET /{tenantId}/Customer : Endpoint for admins to get a list of registered users.
     *
     * @param tenantId Id of the tenant. (required)
     * @param email Optional parameter to query by email. (optional)
     * @param name Optional parameter to query by name. (optional)
     * @param pageSize Parameter to define how many records are in a page. (optional)
     * @param page Parameter to specify which page of records to return. (optional)
     * @return Success (status code 200)
     *         or If user doesn&#39;t exist (status code 404)
     */
    @ApiOperation(value = "Endpoint for admins to get a list of registered users.", nickname = "tenantIdCustomerGet", notes = "", response = AccountDetailsDTO.class, responseContainer = "List", tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccountDetailsDTO.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "If user doesn't exist") })
    @GetMapping(
        value = "/{tenantId}/Customer",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<AccountDetailsDTO>> tenantIdCustomerGet(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Optional parameter to query by email.") @Valid @RequestParam(value = "email", required = false) String email,@ApiParam(value = "Optional parameter to query by name.") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "Parameter to define how many records are in a page.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Parameter to specify which page of records to return.") @Valid @RequestParam(value = "page", required = false) Integer page) {
        return getDelegate().tenantIdCustomerGet(tenantId, email, name, pageSize, page);
    }


    /**
     * POST /{tenantId}/Customer/login : Endpoint for customer to log in.
     *
     * @param tenantId  (required)
     * @param loginDetailsDTO Login details of the customer. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Endpoint for customer to log in.", nickname = "tenantIdCustomerLoginPost", notes = "", response = BearerTokenDTO.class, tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BearerTokenDTO.class) })
    @PostMapping(
        value = "/{tenantId}/Customer/login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<BearerTokenDTO> tenantIdCustomerLoginPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Login details of the customer."  )  @Valid @RequestBody(required = false) LoginDetailsDTO loginDetailsDTO) {
        return getDelegate().tenantIdCustomerLoginPost(tenantId, loginDetailsDTO);
    }


    /**
     * POST /{tenantId}/Customer : Endpoint for creating a new customer account.
     *
     * @param tenantId Id of the store customer is registering to. (required)
     * @param createAccountDTO Customer account details. (required)
     * @return Returns a bearer token of newly created account. (status code 201)
     *         or If account details don&#39;t pass validation. (status code 400)
     *         or If email matches a previously registered users email. (status code 409)
     */
    @ApiOperation(value = "Endpoint for creating a new customer account.", nickname = "tenantIdCustomerPost", notes = "", response = BearerTokenDTO.class, tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Returns a bearer token of newly created account.", response = BearerTokenDTO.class),
        @ApiResponse(code = 400, message = "If account details don't pass validation."),
        @ApiResponse(code = 409, message = "If email matches a previously registered users email.") })
    @PostMapping(
        value = "/{tenantId}/Customer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<BearerTokenDTO> tenantIdCustomerPost(@ApiParam(value = "Id of the store customer is registering to.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Customer account details." ,required=true )  @Valid @RequestBody CreateAccountDTO createAccountDTO) {
        return getDelegate().tenantIdCustomerPost(tenantId, createAccountDTO);
    }


    /**
     * GET /{tenantId}/Customer/{userId} : Endpoint to get user account details.
     *
     * @param userId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If user doesn&#39;t exist (status code 404)
     */
    @ApiOperation(value = "Endpoint to get user account details.", nickname = "tenantIdCustomerUserIdGet", notes = "", response = AccountDetailsDTO.class, tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccountDetailsDTO.class),
        @ApiResponse(code = 404, message = "If user doesn't exist") })
    @GetMapping(
        value = "/{tenantId}/Customer/{userId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<AccountDetailsDTO> tenantIdCustomerUserIdGet(@ApiParam(value = "",required=true) @PathVariable("userId") Integer userId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdCustomerUserIdGet(userId, tenantId);
    }


    /**
     * PUT /{tenantId}/Customer/{userId} : Endpoint to update user account details.
     *
     * @param userId  (required)
     * @param tenantId  (required)
     * @param createAccountDTO Customer account details. (optional)
     * @return Success (status code 200)
     *         or If account details don&#39;t pass validation. (status code 400)
     *         or If user doesn&#39;t exists. (status code 404)
     */
    @ApiOperation(value = "Endpoint to update user account details.", nickname = "tenantIdCustomerUserIdPut", notes = "", tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If account details don't pass validation."),
        @ApiResponse(code = 404, message = "If user doesn't exists.") })
    @PutMapping(
        value = "/{tenantId}/Customer/{userId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdCustomerUserIdPut(@ApiParam(value = "",required=true) @PathVariable("userId") Integer userId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Customer account details."  )  @Valid @RequestBody(required = false) CreateAccountDTO createAccountDTO) {
        return getDelegate().tenantIdCustomerUserIdPut(userId, tenantId, createAccountDTO);
    }


    /**
     * POST /{tenantId}/Discount/AssignDiscountToBrand : Endpoint to assign a discount to a brand.
     *
     * @param tenantId Id of the store. (required)
     * @param assignDiscountToBrandDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to assign a discount to a brand.", nickname = "tenantIdDiscountAssignDiscountToBrandPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Discount/AssignDiscountToBrand",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdDiscountAssignDiscountToBrandPost(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignDiscountToBrandDTO assignDiscountToBrandDTO) {
        return getDelegate().tenantIdDiscountAssignDiscountToBrandPost(tenantId, assignDiscountToBrandDTO);
    }


    /**
     * POST /{tenantId}/Discount/AssignDiscountToCategory : Endpoint to assign a discount to a category.
     *
     * @param tenantId Id of the store. (required)
     * @param assignDiscountToCategoryDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to assign a discount to a category.", nickname = "tenantIdDiscountAssignDiscountToCategoryPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Discount/AssignDiscountToCategory",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdDiscountAssignDiscountToCategoryPost(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignDiscountToCategoryDTO assignDiscountToCategoryDTO) {
        return getDelegate().tenantIdDiscountAssignDiscountToCategoryPost(tenantId, assignDiscountToCategoryDTO);
    }


    /**
     * POST /{tenantId}/Discount/AssignDiscountToItem : Endpoint to assign a discount to a product or service.
     *
     * @param tenantId Id of the store. (required)
     * @param assignDiscountToItemDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to assign a discount to a product or service.", nickname = "tenantIdDiscountAssignDiscountToItemPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Discount/AssignDiscountToItem",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdDiscountAssignDiscountToItemPost(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignDiscountToItemDTO assignDiscountToItemDTO) {
        return getDelegate().tenantIdDiscountAssignDiscountToItemPost(tenantId, assignDiscountToItemDTO);
    }


    /**
     * GET /{tenantId}/Discount/{id} : Endpoint to get a single discount.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the discount to get (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single discount.", nickname = "tenantIdDiscountIdGet", notes = "", response = DiscountDto.class, tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DiscountDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Discount/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<DiscountDto> tenantIdDiscountIdGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the discount to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().tenantIdDiscountIdGet(tenantId, id);
    }


    /**
     * PUT /{tenantId}/Discount/{id} : Endpoint to update a discount.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the discount to update. (required)
     * @param discountDto Discount to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a discount.", nickname = "tenantIdDiscountIdPut", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/Discount/{id}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdDiscountIdPut(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the discount to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Discount to update."  )  @Valid @RequestBody(required = false) DiscountDto discountDto) {
        return getDelegate().tenantIdDiscountIdPut(tenantId, id, discountDto);
    }


    /**
     * GET /{tenantId}/Discount/{pageSize}/{pageNumber} : Endpoint to get multiple discounts.
     *
     * @param tenantId Id of the store. (required)
     * @param pageSize The maximum amount of discounts in response. (required)
     * @param pageNumber The page number of discounts to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get multiple discounts.", nickname = "tenantIdDiscountPageSizePageNumberGet", notes = "", response = Discount.class, responseContainer = "List", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Discount.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Discount/{pageSize}/{pageNumber}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<Discount>> tenantIdDiscountPageSizePageNumberGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "The maximum amount of discounts in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of discounts to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().tenantIdDiscountPageSizePageNumberGet(tenantId, pageSize, pageNumber);
    }


    /**
     * POST /{tenantId}/Discount : Endpoint to create a new discount.
     *
     * @param tenantId  (required)
     * @param discountDto Discount to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new discount.", nickname = "tenantIdDiscountPost", notes = "", tags={ "Discount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Discount",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdDiscountPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Discount to create."  )  @Valid @RequestBody(required = false) DiscountDto discountDto) {
        return getDelegate().tenantIdDiscountPost(tenantId, discountDto);
    }


    /**
     * DELETE /{tenantId}/Employee/{employeeId} : Deletes employee
     *
     * @param tenantId  (required)
     * @param employeeId  (required)
     * @return If employee have been succesfully deleted (status code 200)
     *         or If employee ID is less or equal to 0 (status code 400)
     *         or If no employee ID matched the search (status code 404)
     */
    @ApiOperation(value = "Deletes employee", nickname = "tenantIdEmployeeEmployeeIdDelete", notes = "", tags={ "Employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If employee have been succesfully deleted"),
        @ApiResponse(code = 400, message = "If employee ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no employee ID matched the search", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/{tenantId}/Employee/{employeeId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdEmployeeEmployeeIdDelete(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("employeeId") Integer employeeId) {
        return getDelegate().tenantIdEmployeeEmployeeIdDelete(tenantId, employeeId);
    }


    /**
     * GET /{tenantId}/Employee/{employeeId} : Gets employee details
     *
     * @param tenantId  (required)
     * @param employeeId ID of the employee (required)
     * @return Returns employee details (status code 200)
     *         or If employee ID is less or equal to 0 (status code 400)
     *         or If no employee ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets employee details", nickname = "tenantIdEmployeeEmployeeIdGet", notes = "", response = EmployeeDTO.class, tags={ "Employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns employee details", response = EmployeeDTO.class),
        @ApiResponse(code = 400, message = "If employee ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no employee ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Employee/{employeeId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<EmployeeDTO> tenantIdEmployeeEmployeeIdGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "ID of the employee",required=true) @PathVariable("employeeId") Integer employeeId) {
        return getDelegate().tenantIdEmployeeEmployeeIdGet(tenantId, employeeId);
    }


    /**
     * PATCH /{tenantId}/Employee/{employeeId} : Hides the employee
     *
     * @param tenantId  (required)
     * @param employeeId  (required)
     * @param date  (optional)
     * @return If employee have been succesfully hiden (status code 200)
     *         or If invalid date provided (status code 400)
     *         or If no employee ID matched the search (status code 404)
     */
    @ApiOperation(value = "Hides the employee", nickname = "tenantIdEmployeeEmployeeIdPatch", notes = "", tags={ "Employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If employee have been succesfully hiden"),
        @ApiResponse(code = 400, message = "If invalid date provided", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no employee ID matched the search", response = ProblemDetails.class) })
    @PatchMapping(
        value = "/{tenantId}/Employee/{employeeId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdEmployeeEmployeeIdPatch(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("employeeId") Integer employeeId,@ApiParam(value = "") @Valid @RequestParam(value = "date", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime date) {
        return getDelegate().tenantIdEmployeeEmployeeIdPatch(tenantId, employeeId, date);
    }


    /**
     * PATCH /{tenantId}/Employee/{employeeId}/{permissionId} : Changes employee permissions
     *
     * @param tenantId  (required)
     * @param employeeId  (required)
     * @param permissionId  (required)
     * @return If the employee permissions have been succesfully updated (status code 200)
     *         or If employee ID is less or equal to 0 (status code 400)
     *         or If no permission ID matched the search (status code 404)
     */
    @ApiOperation(value = "Changes employee permissions", nickname = "tenantIdEmployeeEmployeeIdPermissionIdPatch", notes = "", tags={ "Employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If the employee permissions have been succesfully updated"),
        @ApiResponse(code = 400, message = "If employee ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no permission ID matched the search", response = ProblemDetails.class) })
    @PatchMapping(
        value = "/{tenantId}/Employee/{employeeId}/{permissionId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdEmployeeEmployeeIdPermissionIdPatch(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("employeeId") Integer employeeId,@ApiParam(value = "",required=true) @PathVariable("permissionId") Integer permissionId) {
        return getDelegate().tenantIdEmployeeEmployeeIdPermissionIdPatch(tenantId, employeeId, permissionId);
    }


    /**
     * PUT /{tenantId}/Employee/{employeeId} : Updates employee details
     *
     * @param tenantId  (required)
     * @param employeeId  (required)
     * @param employeeDTO  (optional)
     * @return If employee details have been succesfully updated (status code 200)
     *         or If provided employee details do not pass the validation (status code 400)
     *         or If no employee ID matched the search (status code 404)
     */
    @ApiOperation(value = "Updates employee details", nickname = "tenantIdEmployeeEmployeeIdPut", notes = "", tags={ "Employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If employee details have been succesfully updated"),
        @ApiResponse(code = 400, message = "If provided employee details do not pass the validation", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no employee ID matched the search", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/Employee/{employeeId}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdEmployeeEmployeeIdPut(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("employeeId") Integer employeeId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EmployeeDTO employeeDTO) {
        return getDelegate().tenantIdEmployeeEmployeeIdPut(tenantId, employeeId, employeeDTO);
    }


    /**
     * GET /{tenantId}/EmployeePermission/{employeeId} : Gets permission details
     *
     * @param tenantId  (required)
     * @param employeeId  (required)
     * @param permissionId  (optional)
     * @return Returns permissions (status code 200)
     *         or If permission ID is less or equal to 0 (status code 400)
     *         or If no permission ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets permission details", nickname = "tenantIdEmployeePermissionEmployeeIdGet", notes = "", response = EmployeePermissionDTO.class, tags={ "EmployeePermission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns permissions", response = EmployeePermissionDTO.class),
        @ApiResponse(code = 400, message = "If permission ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no permission ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/EmployeePermission/{employeeId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<EmployeePermissionDTO> tenantIdEmployeePermissionEmployeeIdGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("employeeId") String employeeId,@ApiParam(value = "") @Valid @RequestParam(value = "permissionId", required = false) Integer permissionId) {
        return getDelegate().tenantIdEmployeePermissionEmployeeIdGet(tenantId, employeeId, permissionId);
    }


    /**
     * DELETE /{tenantId}/EmployeePermission/{permissionId} : Deletes permission
     *
     * @param tenantId  (required)
     * @param permissionId  (required)
     * @return If permission has been succesfully deleted (status code 200)
     *         or If permission ID is less or equal to 0 (status code 400)
     *         or If no permission ID matched the search (status code 404)
     */
    @ApiOperation(value = "Deletes permission", nickname = "tenantIdEmployeePermissionPermissionIdDelete", notes = "", tags={ "EmployeePermission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If permission has been succesfully deleted"),
        @ApiResponse(code = 400, message = "If permission ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no permission ID matched the search", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/{tenantId}/EmployeePermission/{permissionId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdEmployeePermissionPermissionIdDelete(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("permissionId") Integer permissionId) {
        return getDelegate().tenantIdEmployeePermissionPermissionIdDelete(tenantId, permissionId);
    }


    /**
     * PUT /{tenantId}/EmployeePermission/{permissionId} : Updates permission details
     *
     * @param tenantId  (required)
     * @param permissionId  (required)
     * @param employeePermissionDTO  (optional)
     * @return If permission details hae been succesfully updates (status code 200)
     *         or If provided permission details do not pass the validation (status code 400)
     *         or If no permission ID matched the search (status code 404)
     */
    @ApiOperation(value = "Updates permission details", nickname = "tenantIdEmployeePermissionPermissionIdPut", notes = "", tags={ "EmployeePermission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If permission details hae been succesfully updates"),
        @ApiResponse(code = 400, message = "If provided permission details do not pass the validation", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no permission ID matched the search", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/EmployeePermission/{permissionId}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdEmployeePermissionPermissionIdPut(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("permissionId") Integer permissionId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EmployeePermissionDTO employeePermissionDTO) {
        return getDelegate().tenantIdEmployeePermissionPermissionIdPut(tenantId, permissionId, employeePermissionDTO);
    }


    /**
     * POST /{tenantId}/EmployeePermission : Creates a permission
     *
     * @param tenantId  (required)
     * @param employeePermissionDTO  (optional)
     * @return If permission has been succesfully created (status code 201)
     *         or If provided permission details do not pass the validation (status code 400)
     */
    @ApiOperation(value = "Creates a permission", nickname = "tenantIdEmployeePermissionPost", notes = "", tags={ "EmployeePermission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "If permission has been succesfully created"),
        @ApiResponse(code = 400, message = "If provided permission details do not pass the validation", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/EmployeePermission",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdEmployeePermissionPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EmployeePermissionDTO employeePermissionDTO) {
        return getDelegate().tenantIdEmployeePermissionPost(tenantId, employeePermissionDTO);
    }


    /**
     * POST /{tenantId}/Employee : Creates an employee
     *
     * @param tenantId  (required)
     * @param employeeDTO  (optional)
     * @return If employee has been succesfully created (status code 201)
     *         or If provided employee details do not pass the validation (status code 400)
     */
    @ApiOperation(value = "Creates an employee", nickname = "tenantIdEmployeePost", notes = "", tags={ "Employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "If employee has been succesfully created"),
        @ApiResponse(code = 400, message = "If provided employee details do not pass the validation", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Employee",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdEmployeePost(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EmployeeDTO employeeDTO) {
        return getDelegate().tenantIdEmployeePost(tenantId, employeeDTO);
    }


    /**
     * DELETE /{tenantId}/Location/Delete/{id} : Endpoint to delete a business location.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the business location to delete. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to delete a business location.", nickname = "tenantIdLocationDeleteIdDelete", notes = "", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/{tenantId}/Location/Delete/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdLocationDeleteIdDelete(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the business location to delete.",required=true) @PathVariable("id") Integer id) {
        return getDelegate().tenantIdLocationDeleteIdDelete(tenantId, id);
    }


    /**
     * GET /{tenantId}/Location/Get/{id} : Endpoint to get a single business location.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the business location to get (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single business location.", nickname = "tenantIdLocationGetIdGet", notes = "", response = LocationDto.class, tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = LocationDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Location/Get/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<LocationDto> tenantIdLocationGetIdGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the business location to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().tenantIdLocationGetIdGet(tenantId, id);
    }


    /**
     * GET /{tenantId}/Location/Get/{pageSize}/{pageNumber} : Endpoint to get multiple business locations.
     *
     * @param tenantId Id of the store. (required)
     * @param pageSize The maximum amount of business locations in response. (required)
     * @param pageNumber The page number of business locations to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get multiple business locations.", nickname = "tenantIdLocationGetPageSizePageNumberGet", notes = "", response = Location.class, responseContainer = "List", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Location.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Location/Get/{pageSize}/{pageNumber}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<Location>> tenantIdLocationGetPageSizePageNumberGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "The maximum amount of business locations in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of business locations to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().tenantIdLocationGetPageSizePageNumberGet(tenantId, pageSize, pageNumber);
    }


    /**
     * POST /{tenantId}/Location/Post : Endpoint to create a new business location.
     *
     * @param tenantId Id of the store. (required)
     * @param locationDto Business location to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new business location.", nickname = "tenantIdLocationPostPost", notes = "", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Location/Post",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdLocationPostPost(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Business location to create."  )  @Valid @RequestBody(required = false) LocationDto locationDto) {
        return getDelegate().tenantIdLocationPostPost(tenantId, locationDto);
    }


    /**
     * PUT /{tenantId}/Location/Put/{id} : Endpoint to update a business location.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the business location to update. (required)
     * @param locationDto Business location to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a business location.", nickname = "tenantIdLocationPutIdPut", notes = "", tags={ "Location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/Location/Put/{id}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdLocationPutIdPut(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the business location to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Business location to update."  )  @Valid @RequestBody(required = false) LocationDto locationDto) {
        return getDelegate().tenantIdLocationPutIdPut(tenantId, id, locationDto);
    }


    /**
     * GET /{tenantId}/Material : Get a list of materials.
     *
     * @param tenantId  (required)
     * @param pageSize Parameter to define how many records are in a page. (optional)
     * @param page Parameter to specify which page of records to return. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a list of materials.", nickname = "tenantIdMaterialGet", notes = "", response = MaterialDTO.class, responseContainer = "List", tags={ "Material", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MaterialDTO.class, responseContainer = "List") })
    @GetMapping(
        value = "/{tenantId}/Material",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<MaterialDTO>> tenantIdMaterialGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Parameter to define how many records are in a page.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Parameter to specify which page of records to return.") @Valid @RequestParam(value = "page", required = false) Integer page) {
        return getDelegate().tenantIdMaterialGet(tenantId, pageSize, page);
    }


    /**
     * DELETE /{tenantId}/Material/{materialId} : Delete material by id.
     *
     * @param materialId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If material with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Delete material by id.", nickname = "tenantIdMaterialMaterialIdDelete", notes = "", tags={ "Material", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "If material with such id does not exist.") })
    @DeleteMapping(
        value = "/{tenantId}/Material/{materialId}"
    )
    default ResponseEntity<Void> tenantIdMaterialMaterialIdDelete(@ApiParam(value = "",required=true) @PathVariable("materialId") Integer materialId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdMaterialMaterialIdDelete(materialId, tenantId);
    }


    /**
     * GET /{tenantId}/Material/{materialId} : Get material by Id.
     *
     * @param materialId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If material with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Get material by Id.", nickname = "tenantIdMaterialMaterialIdGet", notes = "", response = MaterialDTO.class, tags={ "Material", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MaterialDTO.class),
        @ApiResponse(code = 404, message = "If material with such id does not exist.") })
    @GetMapping(
        value = "/{tenantId}/Material/{materialId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<MaterialDTO> tenantIdMaterialMaterialIdGet(@ApiParam(value = "",required=true) @PathVariable("materialId") Integer materialId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdMaterialMaterialIdGet(materialId, tenantId);
    }


    /**
     * PUT /{tenantId}/Material/{materialId} : Update material by id.
     *
     * @param materialId  (required)
     * @param tenantId  (required)
     * @param materialDTO  (optional)
     * @return Success (status code 200)
     *         or If some material details are missing. (status code 400)
     *         or If material with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Update material by id.", nickname = "tenantIdMaterialMaterialIdPut", notes = "", tags={ "Material", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some material details are missing."),
        @ApiResponse(code = 404, message = "If material with such id does not exist.") })
    @PutMapping(
        value = "/{tenantId}/Material/{materialId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdMaterialMaterialIdPut(@ApiParam(value = "",required=true) @PathVariable("materialId") Integer materialId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) MaterialDTO materialDTO) {
        return getDelegate().tenantIdMaterialMaterialIdPut(materialId, tenantId, materialDTO);
    }


    /**
     * POST /{tenantId}/Material : Create material.
     *
     * @param tenantId  (required)
     * @param materialDTO  (optional)
     * @return Success (status code 200)
     *         or If some material details are missing. (status code 400)
     */
    @ApiOperation(value = "Create material.", nickname = "tenantIdMaterialPost", notes = "", tags={ "Material", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some material details are missing.") })
    @PostMapping(
        value = "/{tenantId}/Material",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdMaterialPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) MaterialDTO materialDTO) {
        return getDelegate().tenantIdMaterialPost(tenantId, materialDTO);
    }


    /**
     * DELETE /{tenantId}/OrderStatus/{orderStatusId} : Deletes order status
     *
     * @param tenantId  (required)
     * @param orderStatusId  (required)
     * @return If order status have been succesfully delete (status code 200)
     *         or If provided order status details do not pass the validation (status code 400)
     *         or If no order status ID matched the search (status code 404)
     */
    @ApiOperation(value = "Deletes order status", nickname = "tenantIdOrderStatusOrderStatusIdDelete", notes = "", tags={ "OrderStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If order status have been succesfully delete"),
        @ApiResponse(code = 400, message = "If provided order status details do not pass the validation", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no order status ID matched the search", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/{tenantId}/OrderStatus/{orderStatusId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdOrderStatusOrderStatusIdDelete(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("orderStatusId") Integer orderStatusId) {
        return getDelegate().tenantIdOrderStatusOrderStatusIdDelete(tenantId, orderStatusId);
    }


    /**
     * GET /{tenantId}/OrderStatus/{orderStatusId} : Gets order status
     *
     * @param tenantId  (required)
     * @param orderStatusId  (required)
     * @return Returns order status (status code 200)
     *         or If order status ID is less or equal to 0 (status code 400)
     *         or If no orderstatus ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets order status", nickname = "tenantIdOrderStatusOrderStatusIdGet", notes = "", response = OrderStatusDTO.class, tags={ "OrderStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns order status", response = OrderStatusDTO.class),
        @ApiResponse(code = 400, message = "If order status ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no orderstatus ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/OrderStatus/{orderStatusId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<OrderStatusDTO> tenantIdOrderStatusOrderStatusIdGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("orderStatusId") Integer orderStatusId) {
        return getDelegate().tenantIdOrderStatusOrderStatusIdGet(tenantId, orderStatusId);
    }


    /**
     * PATCH /{tenantId}/OrderStatus/{orderStatusId} : Updates order status
     *
     * @param tenantId  (required)
     * @param orderStatusId  (required)
     * @param newOrderStatus  (optional)
     * @return If order status have been succesfully updated (status code 200)
     *         or If the provided order status enum value is invalid (status code 400)
     *         or If no order status ID matched the search (status code 404)
     */
    @ApiOperation(value = "Updates order status", nickname = "tenantIdOrderStatusOrderStatusIdPatch", notes = "", tags={ "OrderStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If order status have been succesfully updated"),
        @ApiResponse(code = 400, message = "If the provided order status enum value is invalid", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no order status ID matched the search", response = ProblemDetails.class) })
    @PatchMapping(
        value = "/{tenantId}/OrderStatus/{orderStatusId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdOrderStatusOrderStatusIdPatch(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("orderStatusId") Integer orderStatusId,@ApiParam(value = "", allowableValues = "0, 1, 2, 3, 4, 5, 6, 7, 8, 9") @Valid @RequestParam(value = "newOrderStatus", required = false) OrderStatusTypes newOrderStatus) {
        return getDelegate().tenantIdOrderStatusOrderStatusIdPatch(tenantId, orderStatusId, newOrderStatus);
    }


    /**
     * PUT /{tenantId}/OrderStatus/{orderStatusId} : Updates order status
     *
     * @param tenantId  (required)
     * @param orderStatusId  (required)
     * @param orderStatusDTO  (optional)
     * @return If order status have been succesfully updated (status code 200)
     *         or If provided order status details do not pass the validation (status code 400)
     *         or If no order status ID matched the search (status code 404)
     */
    @ApiOperation(value = "Updates order status", nickname = "tenantIdOrderStatusOrderStatusIdPut", notes = "", tags={ "OrderStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If order status have been succesfully updated"),
        @ApiResponse(code = 400, message = "If provided order status details do not pass the validation", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no order status ID matched the search", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/OrderStatus/{orderStatusId}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdOrderStatusOrderStatusIdPut(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("orderStatusId") Integer orderStatusId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) OrderStatusDTO orderStatusDTO) {
        return getDelegate().tenantIdOrderStatusOrderStatusIdPut(tenantId, orderStatusId, orderStatusDTO);
    }


    /**
     * POST /{tenantId}/OrderStatus : Creates order status
     *
     * @param tenantId  (required)
     * @param orderStatusDTO  (optional)
     * @return If order status has been succesfully created (status code 201)
     *         or If provided order status details do not pass the validation (status code 400)
     */
    @ApiOperation(value = "Creates order status", nickname = "tenantIdOrderStatusPost", notes = "", tags={ "OrderStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "If order status has been succesfully created"),
        @ApiResponse(code = 400, message = "If provided order status details do not pass the validation", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/OrderStatus",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdOrderStatusPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) OrderStatusDTO orderStatusDTO) {
        return getDelegate().tenantIdOrderStatusPost(tenantId, orderStatusDTO);
    }


    /**
     * GET /{tenantId}/Product : Get a list of products.
     *
     * @param tenantId  (required)
     * @param materialId Parameter to return all products that contain one or more specified materials. (optional)
     * @param categoryId Parameter to return all products that belong in one or more specified categories. (optional)
     * @param brandId Parameter to return all products assigned to specific brands. (optional)
     * @param pageSize Parameter to define how many records are in a page. (optional)
     * @param page Parameter to specify which page of records to return. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a list of products.", nickname = "tenantIdProductGet", notes = "", response = ProductDTO.class, responseContainer = "List", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductDTO.class, responseContainer = "List") })
    @GetMapping(
        value = "/{tenantId}/Product",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<ProductDTO>> tenantIdProductGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Parameter to return all products that contain one or more specified materials.") @Valid @RequestParam(value = "materialId", required = false) List<Integer> materialId,@ApiParam(value = "Parameter to return all products that belong in one or more specified categories.") @Valid @RequestParam(value = "categoryId", required = false) List<Integer> categoryId,@ApiParam(value = "Parameter to return all products assigned to specific brands.") @Valid @RequestParam(value = "brandId", required = false) List<Integer> brandId,@ApiParam(value = "Parameter to define how many records are in a page.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Parameter to specify which page of records to return.") @Valid @RequestParam(value = "page", required = false) Integer page) {
        return getDelegate().tenantIdProductGet(tenantId, materialId, categoryId, brandId, pageSize, page);
    }


    /**
     * POST /{tenantId}/ProductMaterial : Assign material to a product.
     *
     * @param tenantId  (required)
     * @param productMaterial  (optional)
     * @return Success (status code 200)
     *         or If some class details are missing. (status code 400)
     */
    @ApiOperation(value = "Assign material to a product.", nickname = "tenantIdProductMaterialPost", notes = "", tags={ "ProductMaterial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some class details are missing.") })
    @PostMapping(
        value = "/{tenantId}/ProductMaterial",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdProductMaterialPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductMaterial productMaterial) {
        return getDelegate().tenantIdProductMaterialPost(tenantId, productMaterial);
    }


    /**
     * GET /{tenantId}/ProductMaterial/{productId} : Get list of product&#39;s all assigned materials by product Id.
     *
     * @param productId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Get list of product's all assigned materials by product Id.", nickname = "tenantIdProductMaterialProductIdGet", notes = "", response = ProductMaterial.class, responseContainer = "List", tags={ "ProductMaterial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductMaterial.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @GetMapping(
        value = "/{tenantId}/ProductMaterial/{productId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<ProductMaterial>> tenantIdProductMaterialProductIdGet(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdProductMaterialProductIdGet(productId, tenantId);
    }


    /**
     * DELETE /{tenantId}/ProductMaterial/{productId}/{materialId} : Delete product&#39;s assigned material by product Id and material Id.
     *
     * @param productId  (required)
     * @param materialId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If material with such id is not assigned to product with such id. (status code 404)
     */
    @ApiOperation(value = "Delete product's assigned material by product Id and material Id.", nickname = "tenantIdProductMaterialProductIdMaterialIdDelete", notes = "", tags={ "ProductMaterial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "If material with such id is not assigned to product with such id.") })
    @DeleteMapping(
        value = "/{tenantId}/ProductMaterial/{productId}/{materialId}"
    )
    default ResponseEntity<Void> tenantIdProductMaterialProductIdMaterialIdDelete(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("materialId") Integer materialId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdProductMaterialProductIdMaterialIdDelete(productId, materialId, tenantId);
    }


    /**
     * GET /{tenantId}/ProductMaterial/{productId}/{materialId} : Get product&#39;s assigned material by product Id and material Id.
     *
     * @param productId  (required)
     * @param materialId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If material with such id is not assigned to product with such id. (status code 404)
     */
    @ApiOperation(value = "Get product's assigned material by product Id and material Id.", nickname = "tenantIdProductMaterialProductIdMaterialIdGet", notes = "", response = ProductMaterial.class, tags={ "ProductMaterial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductMaterial.class),
        @ApiResponse(code = 404, message = "If material with such id is not assigned to product with such id.") })
    @GetMapping(
        value = "/{tenantId}/ProductMaterial/{productId}/{materialId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<ProductMaterial> tenantIdProductMaterialProductIdMaterialIdGet(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("materialId") Integer materialId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdProductMaterialProductIdMaterialIdGet(productId, materialId, tenantId);
    }


    /**
     * PUT /{tenantId}/ProductMaterial/{productId}/{materialId} : Update product&#39;s assigned material by product Id and material Id.
     *
     * @param productId  (required)
     * @param materialId  (required)
     * @param tenantId  (required)
     * @param productMaterial  (optional)
     * @return Success (status code 200)
     *         or If some class details are missing. (status code 400)
     *         or If material with such id is not assigned to product with such id. (status code 404)
     */
    @ApiOperation(value = "Update product's assigned material by product Id and material Id.", nickname = "tenantIdProductMaterialProductIdMaterialIdPut", notes = "", tags={ "ProductMaterial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some class details are missing."),
        @ApiResponse(code = 404, message = "If material with such id is not assigned to product with such id.") })
    @PutMapping(
        value = "/{tenantId}/ProductMaterial/{productId}/{materialId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdProductMaterialProductIdMaterialIdPut(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("materialId") Integer materialId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductMaterial productMaterial) {
        return getDelegate().tenantIdProductMaterialProductIdMaterialIdPut(productId, materialId, tenantId, productMaterial);
    }


    /**
     * POST /{tenantId}/Product : Create product.
     *
     * @param tenantId  (required)
     * @param productDTO  (optional)
     * @return Success (status code 200)
     *         or If some product details are missing. (status code 400)
     */
    @ApiOperation(value = "Create product.", nickname = "tenantIdProductPost", notes = "", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some product details are missing.") })
    @PostMapping(
        value = "/{tenantId}/Product",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdProductPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductDTO productDTO) {
        return getDelegate().tenantIdProductPost(tenantId, productDTO);
    }


    /**
     * DELETE /{tenantId}/Product/{productId} : Delete product by id.
     *
     * @param productId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Delete product by id.", nickname = "tenantIdProductProductIdDelete", notes = "", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @DeleteMapping(
        value = "/{tenantId}/Product/{productId}"
    )
    default ResponseEntity<Void> tenantIdProductProductIdDelete(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdProductProductIdDelete(productId, tenantId);
    }


    /**
     * GET /{tenantId}/Product/{productId} : Get product by Id.
     *
     * @param productId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Get product by Id.", nickname = "tenantIdProductProductIdGet", notes = "", response = ProductDTO.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductDTO.class),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @GetMapping(
        value = "/{tenantId}/Product/{productId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<ProductDTO> tenantIdProductProductIdGet(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdProductProductIdGet(productId, tenantId);
    }


    /**
     * PUT /{tenantId}/Product/{productId} : Update product by id.
     *
     * @param productId  (required)
     * @param tenantId  (required)
     * @param productDTO  (optional)
     * @return Success (status code 200)
     *         or If some product details are missing. (status code 400)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Update product by id.", nickname = "tenantIdProductProductIdPut", notes = "", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some product details are missing."),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @PutMapping(
        value = "/{tenantId}/Product/{productId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdProductProductIdPut(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductDTO productDTO) {
        return getDelegate().tenantIdProductProductIdPut(productId, tenantId, productDTO);
    }


    /**
     * POST /{tenantId}/ProductStatus : Create product status.
     *
     * @param tenantId  (required)
     * @param productStatusDTO  (optional)
     * @return Success (status code 200)
     *         or If some product status details are missing. (status code 400)
     */
    @ApiOperation(value = "Create product status.", nickname = "tenantIdProductStatusPost", notes = "", tags={ "ProductStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some product status details are missing.") })
    @PostMapping(
        value = "/{tenantId}/ProductStatus",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdProductStatusPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductStatusDTO productStatusDTO) {
        return getDelegate().tenantIdProductStatusPost(tenantId, productStatusDTO);
    }


    /**
     * DELETE /{tenantId}/ProductStatus/{productId} : Delete product status by id.
     *
     * @param productId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Delete product status by id.", nickname = "tenantIdProductStatusProductIdDelete", notes = "", tags={ "ProductStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @DeleteMapping(
        value = "/{tenantId}/ProductStatus/{productId}"
    )
    default ResponseEntity<Void> tenantIdProductStatusProductIdDelete(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdProductStatusProductIdDelete(productId, tenantId);
    }


    /**
     * GET /{tenantId}/ProductStatus/{productId} : Get product status by Id.
     *
     * @param productId  (required)
     * @param tenantId  (required)
     * @return Success (status code 200)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Get product status by Id.", nickname = "tenantIdProductStatusProductIdGet", notes = "", response = ProductStatusDTO.class, tags={ "ProductStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductStatusDTO.class),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @GetMapping(
        value = "/{tenantId}/ProductStatus/{productId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<ProductStatusDTO> tenantIdProductStatusProductIdGet(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId) {
        return getDelegate().tenantIdProductStatusProductIdGet(productId, tenantId);
    }


    /**
     * PUT /{tenantId}/ProductStatus/{productId} : Update product status by id (Enable/Disable, update quantity).
     *
     * @param productId  (required)
     * @param tenantId  (required)
     * @param productStatusDTO  (optional)
     * @return Success (status code 200)
     *         or If some product status details are missing. (status code 400)
     *         or If product with such id does not exist. (status code 404)
     */
    @ApiOperation(value = "Update product status by id (Enable/Disable, update quantity).", nickname = "tenantIdProductStatusProductIdPut", notes = "", tags={ "ProductStatus", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "If some product status details are missing."),
        @ApiResponse(code = 404, message = "If product with such id does not exist.") })
    @PutMapping(
        value = "/{tenantId}/ProductStatus/{productId}",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdProductStatusProductIdPut(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductStatusDTO productStatusDTO) {
        return getDelegate().tenantIdProductStatusProductIdPut(productId, tenantId, productStatusDTO);
    }


    /**
     * GET /{tenantId}/Report/BriefSalesReport : Endpoint to get brief sales report.
     *
     * @param tenantId Id of the store. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get brief sales report.", nickname = "tenantIdReportBriefSalesReportGet", notes = "", response = BriefSalesReportDTO.class, tags={ "Report", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BriefSalesReportDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Report/BriefSalesReport",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<BriefSalesReportDTO> tenantIdReportBriefSalesReportGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId) {
        return getDelegate().tenantIdReportBriefSalesReportGet(tenantId);
    }


    /**
     * GET /{tenantId}/Report/DetailedSalesReport : Endpoint to get detailed sales report.
     *
     * @param tenantId Id of the store. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get detailed sales report.", nickname = "tenantIdReportDetailedSalesReportGet", notes = "", response = DetailedSalesReportDTO.class, tags={ "Report", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DetailedSalesReportDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Report/DetailedSalesReport",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<DetailedSalesReportDTO> tenantIdReportDetailedSalesReportGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId) {
        return getDelegate().tenantIdReportDetailedSalesReportGet(tenantId);
    }


    /**
     * POST /{tenantId}/Reservation : Creates a reservation.
     *
     * @param tenantId Id of the tenant. (required)
     * @param createReservationDTO Details needed to create a reservation. (optional)
     * @return Returns information of the newly created reservation. (status code 200)
     */
    @ApiOperation(value = "Creates a reservation.", nickname = "tenantIdReservationPost", notes = "", response = ReservationInformationDTO.class, tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns information of the newly created reservation.", response = ReservationInformationDTO.class) })
    @PostMapping(
        value = "/{tenantId}/Reservation",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<ReservationInformationDTO> tenantIdReservationPost(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Details needed to create a reservation."  )  @Valid @RequestBody(required = false) CreateReservationDTO createReservationDTO) {
        return getDelegate().tenantIdReservationPost(tenantId, createReservationDTO);
    }


    /**
     * POST /{tenantId}/Reservation/{reservationId}/Cancel : Cancels a reservation.
     * At first should check if the action is being performed by an authorized user or service provider.  When the reservation gets canceled this endpoint should send a notification to the customer and the shop.
     *
     * @param tenantId Id of the tenant. (required)
     * @param reservationId Id of the reservation. (required)
     * @return Returns that cancelation completed successfully. (status code 200)
     */
    @ApiOperation(value = "Cancels a reservation.", nickname = "tenantIdReservationReservationIdCancelPost", notes = "At first should check if the action is being performed by an authorized user or service provider.  When the reservation gets canceled this endpoint should send a notification to the customer and the shop.", tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns that cancelation completed successfully.") })
    @PostMapping(
        value = "/{tenantId}/Reservation/{reservationId}/Cancel"
    )
    default ResponseEntity<Void> tenantIdReservationReservationIdCancelPost(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the reservation.",required=true) @PathVariable("reservationId") Integer reservationId) {
        return getDelegate().tenantIdReservationReservationIdCancelPost(tenantId, reservationId);
    }


    /**
     * GET /{tenantId}/Reservation/{reservationId} : Gets a reservation by id.
     *
     * @param tenantId Id of the tenant. (required)
     * @param reservationId Id of the reservation (required)
     * @return Returns information of the specified reservation. (status code 200)
     *         or When reservation doesn&#39;t exist. (status code 404)
     */
    @ApiOperation(value = "Gets a reservation by id.", nickname = "tenantIdReservationReservationIdGet", notes = "", response = ReservationInformationDTO.class, tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns information of the specified reservation.", response = ReservationInformationDTO.class),
        @ApiResponse(code = 404, message = "When reservation doesn't exist.") })
    @GetMapping(
        value = "/{tenantId}/Reservation/{reservationId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<ReservationInformationDTO> tenantIdReservationReservationIdGet(@ApiParam(value = "Id of the tenant.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the reservation",required=true) @PathVariable("reservationId") Integer reservationId) {
        return getDelegate().tenantIdReservationReservationIdGet(tenantId, reservationId);
    }


    /**
     * DELETE /{tenantId}/Service/{id} : Endpoint to delete a service.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the service to delete. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to delete a service.", nickname = "tenantIdServiceIdDelete", notes = "", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/{tenantId}/Service/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdServiceIdDelete(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the service to delete.",required=true) @PathVariable("id") Integer id) {
        return getDelegate().tenantIdServiceIdDelete(tenantId, id);
    }


    /**
     * GET /{tenantId}/Service/{id} : Endpoint to get a single service.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the service to get (required)
     * @return Success (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single service.", nickname = "tenantIdServiceIdGet", notes = "", response = Service.class, tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Service.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Service/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Service> tenantIdServiceIdGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the service to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().tenantIdServiceIdGet(tenantId, id);
    }


    /**
     * PUT /{tenantId}/Service/{id} : Endpoint to update a service.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the service to update. (required)
     * @param serviceDto Service to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a service.", nickname = "tenantIdServiceIdPut", notes = "", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/Service/{id}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdServiceIdPut(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the service to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Service to update."  )  @Valid @RequestBody(required = false) ServiceDto serviceDto) {
        return getDelegate().tenantIdServiceIdPut(tenantId, id, serviceDto);
    }


    /**
     * GET /{tenantId}/Service/{pageSize}/{pageNumber} : Endpoint to get multiple services.
     *
     * @param tenantId Id of the store. (required)
     * @param pageSize The maximum amount of services in response. (required)
     * @param pageNumber The page number of services to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Endpoint to get multiple services.", nickname = "tenantIdServicePageSizePageNumberGet", notes = "", response = Service.class, responseContainer = "List", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Service.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/Service/{pageSize}/{pageNumber}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<Service>> tenantIdServicePageSizePageNumberGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "The maximum amount of services in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of services to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().tenantIdServicePageSizePageNumberGet(tenantId, pageSize, pageNumber);
    }


    /**
     * POST /{tenantId}/Service/{pageSize}/{pageNumber} : Endpoint to get multiple services with applied filter.
     *
     * @param tenantId Id of the store. (required)
     * @param pageSize The maximum amount of services in response. (required)
     * @param pageNumber The page number of services to return. (required)
     * @param serviceFilterDto Filter to apply to the services. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Endpoint to get multiple services with applied filter.", nickname = "tenantIdServicePageSizePageNumberPost", notes = "", response = Service.class, responseContainer = "List", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Service.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Service/{pageSize}/{pageNumber}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<List<Service>> tenantIdServicePageSizePageNumberPost(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "The maximum amount of services in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of services to return.",required=true) @PathVariable("pageNumber") Integer pageNumber,@ApiParam(value = "Filter to apply to the services."  )  @Valid @RequestBody(required = false) ServiceFilterDto serviceFilterDto) {
        return getDelegate().tenantIdServicePageSizePageNumberPost(tenantId, pageSize, pageNumber, serviceFilterDto);
    }


    /**
     * POST /{tenantId}/Service : Endpoint to create a new service.
     *
     * @param tenantId  (required)
     * @param serviceDto Service to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new service.", nickname = "tenantIdServicePost", notes = "", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/Service",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdServicePost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Service to create."  )  @Valid @RequestBody(required = false) ServiceDto serviceDto) {
        return getDelegate().tenantIdServicePost(tenantId, serviceDto);
    }


    /**
     * POST /{tenantId}/TaxRate/ApplyTaxRateToCategory : Endpoint for applying tax rate to all items in the category.
     *
     * @param tenantId Id of the store. (required)
     * @param applyTaxRateToCategoryDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint for applying tax rate to all items in the category.", nickname = "tenantIdTaxRateApplyTaxRateToCategoryPost", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/TaxRate/ApplyTaxRateToCategory",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdTaxRateApplyTaxRateToCategoryPost(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ApplyTaxRateToCategoryDTO applyTaxRateToCategoryDTO) {
        return getDelegate().tenantIdTaxRateApplyTaxRateToCategoryPost(tenantId, applyTaxRateToCategoryDTO);
    }


    /**
     * POST /{tenantId}/TaxRate/AssignTaxRateToItem : Endpoint for assigning tax rate to an item.
     *
     * @param tenantId Id of the store. (required)
     * @param assignTaxRateToItemDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint for assigning tax rate to an item.", nickname = "tenantIdTaxRateAssignTaxRateToItemPost", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/TaxRate/AssignTaxRateToItem",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdTaxRateAssignTaxRateToItemPost(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignTaxRateToItemDTO assignTaxRateToItemDTO) {
        return getDelegate().tenantIdTaxRateAssignTaxRateToItemPost(tenantId, assignTaxRateToItemDTO);
    }


    /**
     * DELETE /{tenantId}/TaxRate/{id} : Endpoint to delete a tax rate.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the tax rate to delete. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to delete a tax rate.", nickname = "tenantIdTaxRateIdDelete", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/{tenantId}/TaxRate/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdTaxRateIdDelete(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the tax rate to delete.",required=true) @PathVariable("id") Integer id) {
        return getDelegate().tenantIdTaxRateIdDelete(tenantId, id);
    }


    /**
     * GET /{tenantId}/TaxRate/{id} : Endpoint to get a single tax rate.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the tax rate to get (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single tax rate.", nickname = "tenantIdTaxRateIdGet", notes = "", response = TaxRate.class, tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TaxRate.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/TaxRate/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<TaxRate> tenantIdTaxRateIdGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the tax rate to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().tenantIdTaxRateIdGet(tenantId, id);
    }


    /**
     * PUT /{tenantId}/TaxRate/{id} : Endpoint to update a tax rate.
     *
     * @param tenantId Id of the store. (required)
     * @param id Id of the tax rate to update. (required)
     * @param taxRateDto Tax rate to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a tax rate.", nickname = "tenantIdTaxRateIdPut", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/TaxRate/{id}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdTaxRateIdPut(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "Id of the tax rate to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Tax rate to update."  )  @Valid @RequestBody(required = false) TaxRateDto taxRateDto) {
        return getDelegate().tenantIdTaxRateIdPut(tenantId, id, taxRateDto);
    }


    /**
     * GET /{tenantId}/TaxRate/{pageSize}/{pageNumber} : Endpoint to get multiple tax rates.
     *
     * @param tenantId Id of the store. (required)
     * @param pageSize The maximum amount of tax rates in response. (required)
     * @param pageNumber The page number of tax rates to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get multiple tax rates.", nickname = "tenantIdTaxRatePageSizePageNumberGet", notes = "", response = TaxRate.class, responseContainer = "List", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TaxRate.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/TaxRate/{pageSize}/{pageNumber}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<TaxRate>> tenantIdTaxRatePageSizePageNumberGet(@ApiParam(value = "Id of the store.",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "The maximum amount of tax rates in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of tax rates to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().tenantIdTaxRatePageSizePageNumberGet(tenantId, pageSize, pageNumber);
    }


    /**
     * POST /{tenantId}/TaxRate : Endpoint to create a new tax rate.
     *
     * @param tenantId  (required)
     * @param taxRateDto Tax rate to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new tax rate.", nickname = "tenantIdTaxRatePost", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/TaxRate",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdTaxRatePost(@ApiParam(value = "",required=true) @PathVariable("tenantId") String tenantId,@ApiParam(value = "Tax rate to create."  )  @Valid @RequestBody(required = false) TaxRateDto taxRateDto) {
        return getDelegate().tenantIdTaxRatePost(tenantId, taxRateDto);
    }


    /**
     * GET /{tenantId}/TimeSlot/{employeeId} : Gets all time slots by employee id
     *
     * @param tenantId  (required)
     * @param employeeId  (required)
     * @return Returns time slot details (status code 200)
     *         or If time slot ID is less or equal to 0 (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by employee id", nickname = "tenantIdTimeSlotEmployeeIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/TimeSlot/{employeeId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<TimeSlotDTO> tenantIdTimeSlotEmployeeIdGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("employeeId") Integer employeeId) {
        return getDelegate().tenantIdTimeSlotEmployeeIdGet(tenantId, employeeId);
    }


    /**
     * GET /{tenantId}/TimeSlot : Gets all time slots by date
     *
     * @param tenantId  (required)
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @return Returns time slot details (status code 200)
     *         or If provided dates are invalid (status code 400)
     *         or If no dates matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by date", nickname = "tenantIdTimeSlotGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If provided dates are invalid", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no dates matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/TimeSlot",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<TimeSlotDTO> tenantIdTimeSlotGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "") @Valid @RequestParam(value = "FromDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime fromDate,@ApiParam(value = "") @Valid @RequestParam(value = "ToDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime toDate) {
        return getDelegate().tenantIdTimeSlotGet(tenantId, fromDate, toDate);
    }


    /**
     * GET /{tenantId}/TimeSlot/{locationId} : Gets all time slots by location id
     *
     * @param tenantId  (required)
     * @param locationId  (required)
     * @return Returns time slot details (status code 200)
     *         or If time slot location ID is less or equal to 0 (status code 400)
     *         or If no time slot location ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by location id", nickname = "tenantIdTimeSlotLocationIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot location ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot location ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/TimeSlot/{locationId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<TimeSlotDTO> tenantIdTimeSlotLocationIdGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("locationId") Integer locationId) {
        return getDelegate().tenantIdTimeSlotLocationIdGet(tenantId, locationId);
    }


    /**
     * POST /{tenantId}/TimeSlot : Creates a time slot
     *
     * @param tenantId  (required)
     * @param timeSlotDTO  (optional)
     * @return If time slot has been succesfully created (status code 201)
     *         or If provided time slot details do not pass the validation (status code 400)
     */
    @ApiOperation(value = "Creates a time slot", nickname = "tenantIdTimeSlotPost", notes = "", tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "If time slot has been succesfully created"),
        @ApiResponse(code = 400, message = "If provided time slot details do not pass the validation", response = ProblemDetails.class) })
    @PostMapping(
        value = "/{tenantId}/TimeSlot",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdTimeSlotPost(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) TimeSlotDTO timeSlotDTO) {
        return getDelegate().tenantIdTimeSlotPost(tenantId, timeSlotDTO);
    }


    /**
     * GET /{tenantId}/TimeSlot/{serviceId} : Gets all time slots by service id
     *
     * @param tenantId  (required)
     * @param serviceId  (required)
     * @return Success (status code 200)
     *         or If time slot service ID is less or equal to 0 (status code 400)
     *         or If no time slot service ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets all time slots by service id", nickname = "tenantIdTimeSlotServiceIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot service ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot service ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/TimeSlot/{serviceId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<TimeSlotDTO> tenantIdTimeSlotServiceIdGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("serviceId") Integer serviceId) {
        return getDelegate().tenantIdTimeSlotServiceIdGet(tenantId, serviceId);
    }


    /**
     * DELETE /{tenantId}/TimeSlot/{timeSlotId} : Deletes time slot
     *
     * @param tenantId  (required)
     * @param timeSlotId  (required)
     * @return If time slot have been succesfully deleted (status code 200)
     *         or If time slot ID is less or equal to 0 (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Deletes time slot", nickname = "tenantIdTimeSlotTimeSlotIdDelete", notes = "", tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If time slot have been succesfully deleted"),
        @ApiResponse(code = 400, message = "If time slot ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/{tenantId}/TimeSlot/{timeSlotId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> tenantIdTimeSlotTimeSlotIdDelete(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("timeSlotId") Integer timeSlotId) {
        return getDelegate().tenantIdTimeSlotTimeSlotIdDelete(tenantId, timeSlotId);
    }


    /**
     * GET /{tenantId}/TimeSlot/{timeSlotId} : Gets time slot details
     *
     * @param tenantId  (required)
     * @param timeSlotId  (required)
     * @return Returns time slot details (status code 200)
     *         or If time slot ID is less or equal to 0 (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Gets time slot details", nickname = "tenantIdTimeSlotTimeSlotIdGet", notes = "", response = TimeSlotDTO.class, tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns time slot details", response = TimeSlotDTO.class),
        @ApiResponse(code = 400, message = "If time slot ID is less or equal to 0", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @GetMapping(
        value = "/{tenantId}/TimeSlot/{timeSlotId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<TimeSlotDTO> tenantIdTimeSlotTimeSlotIdGet(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("timeSlotId") Integer timeSlotId) {
        return getDelegate().tenantIdTimeSlotTimeSlotIdGet(tenantId, timeSlotId);
    }


    /**
     * PUT /{tenantId}/TimeSlot/{timeSlotId} : Updates time slot
     *
     * @param tenantId  (required)
     * @param timeSlotId  (required)
     * @param timeSlotDTO  (optional)
     * @return If time slot details have been succesfully updated (status code 200)
     *         or If provided time slot details do not pass the validation (status code 400)
     *         or If no time slot ID matched the search (status code 404)
     */
    @ApiOperation(value = "Updates time slot", nickname = "tenantIdTimeSlotTimeSlotIdPut", notes = "", tags={ "TimeSlot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If time slot details have been succesfully updated"),
        @ApiResponse(code = 400, message = "If provided time slot details do not pass the validation", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "If no time slot ID matched the search", response = ProblemDetails.class) })
    @PutMapping(
        value = "/{tenantId}/TimeSlot/{timeSlotId}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantIdTimeSlotTimeSlotIdPut(@ApiParam(value = "",required=true) @PathVariable("tenantId") Integer tenantId,@ApiParam(value = "",required=true) @PathVariable("timeSlotId") Integer timeSlotId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) TimeSlotDTO timeSlotDTO) {
        return getDelegate().tenantIdTimeSlotTimeSlotIdPut(tenantId, timeSlotId, timeSlotDTO);
    }

}
