/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.dto.ApplyTaxRateToCategoryDTO;
import com.example.psp.dto.AssignTaxRateToItemDTO;
import com.example.psp.dto.ProblemDetails;
import com.example.psp.dto.TaxRate;
import com.example.psp.dto.TaxRateDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "tax-rate", description = "the tax-rate API")
public interface TaxRateApi {

    default TaxRateApiDelegate getDelegate() {
        return new TaxRateApiDelegate() {};
    }

    /**
     * POST /tax-rate/apply-tax-rate-to-category : Endpoint for applying tax rate to all items in the category.
     *
     * @param applyTaxRateToCategoryDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint for applying tax rate to all items in the category.", nickname = "taxRateApplyTaxRateToCategoryPost", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/tax-rate/apply-tax-rate-to-category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> taxRateApplyTaxRateToCategoryPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ApplyTaxRateToCategoryDTO applyTaxRateToCategoryDTO) {
        return getDelegate().taxRateApplyTaxRateToCategoryPost(applyTaxRateToCategoryDTO);
    }


    /**
     * POST /tax-rate/AssignTaxRateToItem : Endpoint for assigning tax rate to an item.
     *
     * @param assignTaxRateToItemDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint for assigning tax rate to an item.", nickname = "taxRateAssignTaxRateToItemPost", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PostMapping(
        value = "/tax-rate/AssignTaxRateToItem",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> taxRateAssignTaxRateToItemPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AssignTaxRateToItemDTO assignTaxRateToItemDTO) {
        return getDelegate().taxRateAssignTaxRateToItemPost(assignTaxRateToItemDTO);
    }


    /**
     * DELETE /tax-rate/{id} : Endpoint to delete a tax rate.
     *
     * @param id Id of the tax rate to delete. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to delete a tax rate.", nickname = "taxRateIdDelete", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/tax-rate/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> taxRateIdDelete(@ApiParam(value = "Id of the tax rate to delete.",required=true) @PathVariable("id") Integer id) {
        return getDelegate().taxRateIdDelete(id);
    }


    /**
     * GET /tax-rate/{id} : Endpoint to get a single tax rate.
     *
     * @param id Id of the tax rate to get (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single tax rate.", nickname = "taxRateIdGet", notes = "", response = TaxRate.class, tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TaxRate.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/tax-rate/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TaxRate> taxRateIdGet(@ApiParam(value = "Id of the tax rate to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().taxRateIdGet(id);
    }


    /**
     * PUT /tax-rate/{id} : Endpoint to update a tax rate.
     *
     * @param id Id of the tax rate to update. (required)
     * @param taxRateDto Tax rate to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a tax rate.", nickname = "taxRateIdPut", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/tax-rate/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> taxRateIdPut(@ApiParam(value = "Id of the tax rate to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Tax rate to update."  )  @Valid @RequestBody(required = false) TaxRateDto taxRateDto) {
        return getDelegate().taxRateIdPut(id, taxRateDto);
    }


    /**
     * GET /tax-rate/{pageSize}/{pageNumber} : Endpoint to get multiple tax rates.
     *
     * @param pageSize The maximum amount of tax rates in response. (required)
     * @param pageNumber The page number of tax rates to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to get multiple tax rates.", nickname = "taxRatePageSizePageNumberGet", notes = "", response = TaxRate.class, responseContainer = "List", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TaxRate.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @GetMapping(
        value = "/tax-rate/{pageSize}/{pageNumber}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TaxRate>> taxRatePageSizePageNumberGet(@ApiParam(value = "The maximum amount of tax rates in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of tax rates to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().taxRatePageSizePageNumberGet(pageSize, pageNumber);
    }


    /**
     * POST /tax-rate : Endpoint to create a new tax rate.
     *
     * @param taxRateDto Tax rate to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new tax rate.", nickname = "taxRatePost", notes = "", tags={ "TaxRate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/tax-rate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> taxRatePost(@ApiParam(value = "Tax rate to create."  )  @Valid @RequestBody(required = false) TaxRateDto taxRateDto) {
        return getDelegate().taxRatePost(taxRateDto);
    }

}
