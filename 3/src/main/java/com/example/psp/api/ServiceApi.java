/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.model.ProblemDetails;
import com.example.psp.model.Service;
import com.example.psp.model.ServiceDto;
import com.example.psp.model.ServiceFilterDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "service", description = "the service API")
public interface ServiceApi {

    default ServiceApiDelegate getDelegate() {
        return new ServiceApiDelegate() {};
    }

    /**
     * DELETE /service/{id} : Endpoint to delete a service.
     *
     * @param id Id of the service to delete. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to delete a service.", nickname = "serviceIdDelete", notes = "", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @DeleteMapping(
        value = "/service/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Void> serviceIdDelete(@ApiParam(value = "Id of the service to delete.",required=true) @PathVariable("id") Integer id) {
        return getDelegate().serviceIdDelete(id);
    }


    /**
     * GET /service/{id} : Endpoint to get a single service.
     *
     * @param id Id of the service to get (required)
     * @return Success (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get a single service.", nickname = "serviceIdGet", notes = "", response = Service.class, tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Service.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/service/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Service> serviceIdGet(@ApiParam(value = "Id of the service to get",required=true) @PathVariable("id") Integer id) {
        return getDelegate().serviceIdGet(id);
    }


    /**
     * PUT /service/{id} : Endpoint to update a service.
     *
     * @param id Id of the service to update. (required)
     * @param serviceDto Service to update. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to update a service.", nickname = "serviceIdPut", notes = "", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @PutMapping(
        value = "/service/{id}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> serviceIdPut(@ApiParam(value = "Id of the service to update.",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Service to update."  )  @Valid @RequestBody(required = false) ServiceDto serviceDto) {
        return getDelegate().serviceIdPut(id, serviceDto);
    }


    /**
     * GET /service/{pageSize}/{pageNumber} : Endpoint to get multiple services.
     *
     * @param pageSize The maximum amount of services in response. (required)
     * @param pageNumber The page number of services to return. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Endpoint to get multiple services.", nickname = "servicePageSizePageNumberGet", notes = "", response = Service.class, responseContainer = "List", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Service.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class) })
    @GetMapping(
        value = "/service/{pageSize}/{pageNumber}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<Service>> servicePageSizePageNumberGet(@ApiParam(value = "The maximum amount of services in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of services to return.",required=true) @PathVariable("pageNumber") Integer pageNumber) {
        return getDelegate().servicePageSizePageNumberGet(pageSize, pageNumber);
    }


    /**
     * POST /service/{pageSize}/{pageNumber} : Endpoint to get multiple services with applied filter.
     *
     * @param pageSize The maximum amount of services in response. (required)
     * @param pageNumber The page number of services to return. (required)
     * @param serviceFilterDto Filter to apply to the services. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Endpoint to get multiple services with applied filter.", nickname = "servicePageSizePageNumberPost", notes = "", response = Service.class, responseContainer = "List", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Service.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class) })
    @PostMapping(
        value = "/service/{pageSize}/{pageNumber}",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<List<Service>> servicePageSizePageNumberPost(@ApiParam(value = "The maximum amount of services in response.",required=true) @PathVariable("pageSize") Integer pageSize,@ApiParam(value = "The page number of services to return.",required=true) @PathVariable("pageNumber") Integer pageNumber,@ApiParam(value = "Filter to apply to the services."  )  @Valid @RequestBody(required = false) ServiceFilterDto serviceFilterDto) {
        return getDelegate().servicePageSizePageNumberPost(pageSize, pageNumber, serviceFilterDto);
    }


    /**
     * POST /service : Endpoint to create a new service.
     *
     * @param serviceDto Service to create. (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "Endpoint to create a new service.", nickname = "servicePost", notes = "", tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class) })
    @PostMapping(
        value = "/service",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> servicePost(@ApiParam(value = "Service to create."  )  @Valid @RequestBody(required = false) ServiceDto serviceDto) {
        return getDelegate().servicePost(serviceDto);
    }

}
