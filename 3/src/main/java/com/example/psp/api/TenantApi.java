/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.psp.api;

import com.example.psp.model.CreateTenantAccountDTO;
import com.example.psp.model.CredentialsDto;
import com.example.psp.model.ProblemDetails;
import com.example.psp.model.TenantAccountDetailsDTO;
import com.example.psp.model.TokenDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T17:27:47.624170900+02:00[Europe/Vilnius]")
@Validated
@Api(value = "tenant", description = "the tenant API")
public interface TenantApi {

    default TenantApiDelegate getDelegate() {
        return new TenantApiDelegate() {};
    }

    /**
     * DELETE /tenant : Endpoint to delete a store.
     *
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Endpoint to delete a store.", nickname = "tenantDelete", notes = "", tags={ "Tenant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success") })
    @DeleteMapping(
        value = "/tenant"
    )
    default ResponseEntity<Void> tenantDelete() {
        return getDelegate().tenantDelete();
    }


    /**
     * GET /tenant : Endpoint to get the details of a store.
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Endpoint to get the details of a store.", nickname = "tenantGet", notes = "", response = TenantAccountDetailsDTO.class, tags={ "Tenant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TenantAccountDetailsDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @GetMapping(
        value = "/tenant",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<TenantAccountDetailsDTO> tenantGet() {
        return getDelegate().tenantGet();
    }


    /**
     * POST /tenant/login : Endpoint to login to a store.
     *
     * @param credentialsDto  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Endpoint to login to a store.", nickname = "tenantLoginPost", notes = "", response = TokenDTO.class, tags={ "Tenant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TokenDTO.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class) })
    @PostMapping(
        value = "/tenant/login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<TokenDTO> tenantLoginPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CredentialsDto credentialsDto) {
        return getDelegate().tenantLoginPost(credentialsDto);
    }


    /**
     * POST /tenant : Endpoint to create a new store.
     *
     * @param createTenantAccountDTO  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Endpoint to create a new store.", nickname = "tenantPost", notes = "", tags={ "Tenant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class) })
    @PostMapping(
        value = "/tenant",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CreateTenantAccountDTO createTenantAccountDTO) {
        return getDelegate().tenantPost(createTenantAccountDTO);
    }


    /**
     * PUT /tenant : Endpoint to update a store.
     *
     * @param createTenantAccountDTO  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Endpoint to update a store.", nickname = "tenantPut", notes = "", tags={ "Tenant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success") })
    @PutMapping(
        value = "/tenant",
        consumes = { "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> tenantPut(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CreateTenantAccountDTO createTenantAccountDTO) {
        return getDelegate().tenantPut(createTenantAccountDTO);
    }

}
